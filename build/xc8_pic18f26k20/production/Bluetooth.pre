
# 1 "Bluetooth.c"

# 26 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\htc.h"
extern const char __xc8_OPTIM_SPEED;


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 49 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic18f26k20.h"
extern volatile unsigned char SSPMSK @ 0xF77;

asm("SSPMSK equ 0F77h");


typedef union {
struct {
unsigned MSK0 :1;
unsigned MSK1 :1;
unsigned MSK2 :1;
unsigned MSK3 :1;
unsigned MSK4 :1;
unsigned MSK5 :1;
unsigned MSK6 :1;
unsigned MSK7 :1;
};
} SSPMSKbits_t;
extern volatile SSPMSKbits_t SSPMSKbits @ 0xF77;

# 110
extern volatile unsigned char SLRCON @ 0xF78;

asm("SLRCON equ 0F78h");


typedef union {
struct {
unsigned SLRA :1;
unsigned SLRB :1;
unsigned SLRC :1;
};
} SLRCONbits_t;
extern volatile SLRCONbits_t SLRCONbits @ 0xF78;

# 141
extern volatile unsigned char CM2CON1 @ 0xF79;

asm("CM2CON1 equ 0F79h");


typedef union {
struct {
unsigned :4;
unsigned C2RSEL :1;
unsigned C1RSEL :1;
unsigned MC2OUT :1;
unsigned MC1OUT :1;
};
} CM2CON1bits_t;
extern volatile CM2CON1bits_t CM2CON1bits @ 0xF79;

# 179
extern volatile unsigned char CM2CON0 @ 0xF7A;

asm("CM2CON0 equ 0F7Ah");


typedef union {
struct {
unsigned C2CH :2;
unsigned C2R :1;
unsigned C2SP :1;
unsigned C2POL :1;
unsigned C2OE :1;
unsigned C2OUT :1;
unsigned C2ON :1;
};
struct {
unsigned C2CH0 :1;
unsigned C2CH1 :1;
};
} CM2CON0bits_t;
extern volatile CM2CON0bits_t CM2CON0bits @ 0xF7A;

# 248
extern volatile unsigned char CM1CON0 @ 0xF7B;

asm("CM1CON0 equ 0F7Bh");


typedef union {
struct {
unsigned C1CH :2;
unsigned C1R :1;
unsigned C1SP :1;
unsigned C1POL :1;
unsigned C1OE :1;
unsigned C1OUT :1;
unsigned C1ON :1;
};
struct {
unsigned C1CH0 :1;
unsigned C1CH1 :1;
};
} CM1CON0bits_t;
extern volatile CM1CON0bits_t CM1CON0bits @ 0xF7B;

# 317
extern volatile unsigned char WPUB @ 0xF7C;

asm("WPUB equ 0F7Ch");


typedef union {
struct {
unsigned WPUB0 :1;
unsigned WPUB1 :1;
unsigned WPUB2 :1;
unsigned WPUB3 :1;
unsigned WPUB4 :1;
unsigned WPUB5 :1;
unsigned WPUB6 :1;
unsigned WPUB7 :1;
};
} WPUBbits_t;
extern volatile WPUBbits_t WPUBbits @ 0xF7C;

# 378
extern volatile unsigned char IOCB @ 0xF7D;

asm("IOCB equ 0F7Dh");


typedef union {
struct {
unsigned :4;
unsigned IOCB4 :1;
unsigned IOCB5 :1;
unsigned IOCB6 :1;
unsigned IOCB7 :1;
};
} IOCBbits_t;
extern volatile IOCBbits_t IOCBbits @ 0xF7D;

# 416
extern volatile unsigned char ANSEL @ 0xF7E;

asm("ANSEL equ 0F7Eh");


typedef union {
struct {
unsigned ANS0 :1;
unsigned ANS1 :1;
unsigned ANS2 :1;
unsigned ANS3 :1;
unsigned ANS4 :1;
};
} ANSELbits_t;
extern volatile ANSELbits_t ANSELbits @ 0xF7E;

# 459
extern volatile unsigned char ANSELH @ 0xF7F;

asm("ANSELH equ 0F7Fh");


typedef union {
struct {
unsigned ANS8 :1;
unsigned ANS9 :1;
unsigned ANS10 :1;
unsigned ANS11 :1;
unsigned ANS12 :1;
};
} ANSELHbits_t;
extern volatile ANSELHbits_t ANSELHbits @ 0xF7F;

# 502
extern volatile unsigned char PORTA @ 0xF80;

asm("PORTA equ 0F80h");


typedef union {
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
struct {
unsigned AN0 :1;
unsigned AN1 :1;
unsigned AN2 :1;
unsigned AN3 :1;
unsigned :1;
unsigned AN4 :1;
};
struct {
unsigned C12IN0M :1;
unsigned C12IN1M :1;
unsigned C2INP :1;
unsigned C1INP :1;
unsigned C1OUT :1;
unsigned C2OUT :1;
};
struct {
unsigned C12IN0N :1;
unsigned C12IN1N :1;
unsigned VREFM :1;
unsigned VREFP :1;
unsigned T0CKI :1;
unsigned SS :1;
};
struct {
unsigned :5;
unsigned NOT_SS :1;
};
struct {
unsigned :2;
unsigned VREFN :1;
unsigned :2;
unsigned nSS :1;
};
struct {
unsigned :2;
unsigned CVREF :1;
unsigned :2;
unsigned LVDIN :1;
};
struct {
unsigned :5;
unsigned HLVDIN :1;
};
struct {
unsigned :7;
unsigned RJPU :1;
};
struct {
unsigned ULPWUIN :1;
};
} PORTAbits_t;
extern volatile PORTAbits_t PORTAbits @ 0xF80;

# 739
extern volatile unsigned char PORTB @ 0xF81;

asm("PORTB equ 0F81h");


typedef union {
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
struct {
unsigned INT0 :1;
unsigned INT1 :1;
unsigned INT2 :1;
unsigned CCP2 :1;
unsigned KBI0 :1;
unsigned KBI1 :1;
unsigned KBI2 :1;
unsigned KBI3 :1;
};
struct {
unsigned AN12 :1;
unsigned AN10 :1;
unsigned AN8 :1;
unsigned AN9 :1;
unsigned AN11 :1;
unsigned PGM :1;
unsigned PGC :1;
unsigned PGD :1;
};
struct {
unsigned FLT0 :1;
unsigned C12IN3M :1;
unsigned :1;
unsigned C12IN2M :1;
};
struct {
unsigned :1;
unsigned C12IN3N :1;
unsigned :1;
unsigned C12IN2N :1;
};
struct {
unsigned :1;
unsigned P1C :1;
unsigned P1B :1;
unsigned :1;
unsigned P1D :1;
};
struct {
unsigned :3;
unsigned CCP2_PA2 :1;
};
} PORTBbits_t;
extern volatile PORTBbits_t PORTBbits @ 0xF81;

# 968
extern volatile unsigned char PORTC @ 0xF82;

asm("PORTC equ 0F82h");


typedef union {
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
struct {
unsigned T1OSO :1;
unsigned T1OSI :1;
unsigned CCP1 :1;
unsigned SCK :1;
unsigned SDI :1;
unsigned SDO :1;
unsigned TX :1;
unsigned RX :1;
};
struct {
unsigned T13CKI :1;
unsigned CCP2 :1;
unsigned P1A :1;
unsigned SCL :1;
unsigned SDA :1;
unsigned :1;
unsigned CK :1;
unsigned DT :1;
};
struct {
unsigned T1CKI :1;
};
struct {
unsigned T3CKI :1;
};
struct {
unsigned :2;
unsigned PA1 :1;
};
struct {
unsigned :1;
unsigned PA2 :1;
};
} PORTCbits_t;
extern volatile PORTCbits_t PORTCbits @ 0xF82;

# 1158
extern volatile unsigned char PORTE @ 0xF84;

asm("PORTE equ 0F84h");


typedef union {
struct {
unsigned :3;
unsigned RE3 :1;
};
struct {
unsigned :3;
unsigned MCLR :1;
};
struct {
unsigned :3;
unsigned NOT_MCLR :1;
};
struct {
unsigned :3;
unsigned nMCLR :1;
};
struct {
unsigned :3;
unsigned VPP :1;
};
struct {
unsigned :2;
unsigned CCP10 :1;
};
struct {
unsigned :7;
unsigned CCP2E :1;
};
struct {
unsigned :6;
unsigned CCP6E :1;
};
struct {
unsigned :5;
unsigned CCP7E :1;
};
struct {
unsigned :4;
unsigned CCP8E :1;
};
struct {
unsigned :3;
unsigned CCP9E :1;
};
struct {
unsigned :2;
unsigned CS :1;
};
struct {
unsigned :7;
unsigned PA2E :1;
};
struct {
unsigned :6;
unsigned PB1E :1;
};
struct {
unsigned :2;
unsigned PB2 :1;
};
struct {
unsigned :4;
unsigned PB3E :1;
};
struct {
unsigned :5;
unsigned PC1E :1;
};
struct {
unsigned :1;
unsigned PC2 :1;
};
struct {
unsigned :3;
unsigned PC3E :1;
};
struct {
unsigned PD2 :1;
};
struct {
unsigned RDE :1;
};
struct {
unsigned RE0 :1;
};
struct {
unsigned :1;
unsigned RE1 :1;
};
struct {
unsigned :2;
unsigned RE2 :1;
};
struct {
unsigned :4;
unsigned RE4 :1;
};
struct {
unsigned :5;
unsigned RE5 :1;
};
struct {
unsigned :6;
unsigned RE6 :1;
};
struct {
unsigned :7;
unsigned RE7 :1;
};
struct {
unsigned :1;
unsigned WRE :1;
};
} PORTEbits_t;
extern volatile PORTEbits_t PORTEbits @ 0xF84;

# 1427
extern volatile unsigned char LATA @ 0xF89;

asm("LATA equ 0F89h");


typedef union {
struct {
unsigned LATA0 :1;
unsigned LATA1 :1;
unsigned LATA2 :1;
unsigned LATA3 :1;
unsigned LATA4 :1;
unsigned LATA5 :1;
unsigned LATA6 :1;
unsigned LATA7 :1;
};
struct {
unsigned LA0 :1;
};
struct {
unsigned :1;
unsigned LA1 :1;
};
struct {
unsigned :2;
unsigned LA2 :1;
};
struct {
unsigned :3;
unsigned LA3 :1;
};
struct {
unsigned :4;
unsigned LA4 :1;
};
struct {
unsigned :5;
unsigned LA5 :1;
};
struct {
unsigned :6;
unsigned LA6 :1;
};
struct {
unsigned :7;
unsigned LA7 :1;
};
} LATAbits_t;
extern volatile LATAbits_t LATAbits @ 0xF89;

# 1559
extern volatile unsigned char LATB @ 0xF8A;

asm("LATB equ 0F8Ah");


typedef union {
struct {
unsigned LATB0 :1;
unsigned LATB1 :1;
unsigned LATB2 :1;
unsigned LATB3 :1;
unsigned LATB4 :1;
unsigned LATB5 :1;
unsigned LATB6 :1;
unsigned LATB7 :1;
};
struct {
unsigned LB0 :1;
};
struct {
unsigned :1;
unsigned LB1 :1;
};
struct {
unsigned :2;
unsigned LB2 :1;
};
struct {
unsigned :3;
unsigned LB3 :1;
};
struct {
unsigned :4;
unsigned LB4 :1;
};
struct {
unsigned :5;
unsigned LB5 :1;
};
struct {
unsigned :6;
unsigned LB6 :1;
};
struct {
unsigned :7;
unsigned LB7 :1;
};
} LATBbits_t;
extern volatile LATBbits_t LATBbits @ 0xF8A;

# 1691
extern volatile unsigned char LATC @ 0xF8B;

asm("LATC equ 0F8Bh");


typedef union {
struct {
unsigned LATC0 :1;
unsigned LATC1 :1;
unsigned LATC2 :1;
unsigned LATC3 :1;
unsigned LATC4 :1;
unsigned LATC5 :1;
unsigned LATC6 :1;
unsigned LATC7 :1;
};
struct {
unsigned LC0 :1;
};
struct {
unsigned :1;
unsigned LC1 :1;
};
struct {
unsigned :2;
unsigned LC2 :1;
};
struct {
unsigned :3;
unsigned LC3 :1;
};
struct {
unsigned :4;
unsigned LC4 :1;
};
struct {
unsigned :5;
unsigned LC5 :1;
};
struct {
unsigned :6;
unsigned LC6 :1;
};
struct {
unsigned :7;
unsigned LC7 :1;
};
} LATCbits_t;
extern volatile LATCbits_t LATCbits @ 0xF8B;

# 1823
extern volatile unsigned char TRISA @ 0xF92;

asm("TRISA equ 0F92h");


extern volatile unsigned char DDRA @ 0xF92;

asm("DDRA equ 0F92h");


typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} TRISAbits_t;
extern volatile TRISAbits_t TRISAbits @ 0xF92;

# 1938
typedef union {
struct {
unsigned TRISA0 :1;
unsigned TRISA1 :1;
unsigned TRISA2 :1;
unsigned TRISA3 :1;
unsigned TRISA4 :1;
unsigned TRISA5 :1;
unsigned TRISA6 :1;
unsigned TRISA7 :1;
};
struct {
unsigned RA0 :1;
unsigned RA1 :1;
unsigned RA2 :1;
unsigned RA3 :1;
unsigned RA4 :1;
unsigned RA5 :1;
unsigned RA6 :1;
unsigned RA7 :1;
};
} DDRAbits_t;
extern volatile DDRAbits_t DDRAbits @ 0xF92;

# 2044
extern volatile unsigned char TRISB @ 0xF93;

asm("TRISB equ 0F93h");


extern volatile unsigned char DDRB @ 0xF93;

asm("DDRB equ 0F93h");


typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} TRISBbits_t;
extern volatile TRISBbits_t TRISBbits @ 0xF93;

# 2159
typedef union {
struct {
unsigned TRISB0 :1;
unsigned TRISB1 :1;
unsigned TRISB2 :1;
unsigned TRISB3 :1;
unsigned TRISB4 :1;
unsigned TRISB5 :1;
unsigned TRISB6 :1;
unsigned TRISB7 :1;
};
struct {
unsigned RB0 :1;
unsigned RB1 :1;
unsigned RB2 :1;
unsigned RB3 :1;
unsigned RB4 :1;
unsigned RB5 :1;
unsigned RB6 :1;
unsigned RB7 :1;
};
} DDRBbits_t;
extern volatile DDRBbits_t DDRBbits @ 0xF93;

# 2265
extern volatile unsigned char TRISC @ 0xF94;

asm("TRISC equ 0F94h");


extern volatile unsigned char DDRC @ 0xF94;

asm("DDRC equ 0F94h");


typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} TRISCbits_t;
extern volatile TRISCbits_t TRISCbits @ 0xF94;

# 2380
typedef union {
struct {
unsigned TRISC0 :1;
unsigned TRISC1 :1;
unsigned TRISC2 :1;
unsigned TRISC3 :1;
unsigned TRISC4 :1;
unsigned TRISC5 :1;
unsigned TRISC6 :1;
unsigned TRISC7 :1;
};
struct {
unsigned RC0 :1;
unsigned RC1 :1;
unsigned RC2 :1;
unsigned RC3 :1;
unsigned RC4 :1;
unsigned RC5 :1;
unsigned RC6 :1;
unsigned RC7 :1;
};
} DDRCbits_t;
extern volatile DDRCbits_t DDRCbits @ 0xF94;

# 2486
extern volatile unsigned char OSCTUNE @ 0xF9B;

asm("OSCTUNE equ 0F9Bh");


typedef union {
struct {
unsigned TUN :6;
unsigned PLLEN :1;
unsigned INTSRC :1;
};
struct {
unsigned TUN0 :1;
unsigned TUN1 :1;
unsigned TUN2 :1;
unsigned TUN3 :1;
unsigned TUN4 :1;
unsigned TUN5 :1;
};
} OSCTUNEbits_t;
extern volatile OSCTUNEbits_t OSCTUNEbits @ 0xF9B;

# 2555
extern volatile unsigned char PIE1 @ 0xF9D;

asm("PIE1 equ 0F9Dh");


typedef union {
struct {
unsigned TMR1IE :1;
unsigned TMR2IE :1;
unsigned CCP1IE :1;
unsigned SSPIE :1;
unsigned TXIE :1;
unsigned RCIE :1;
unsigned ADIE :1;
};
struct {
unsigned :5;
unsigned RC1IE :1;
};
struct {
unsigned :4;
unsigned TX1IE :1;
};
} PIE1bits_t;
extern volatile PIE1bits_t PIE1bits @ 0xF9D;

# 2628
extern volatile unsigned char PIR1 @ 0xF9E;

asm("PIR1 equ 0F9Eh");


typedef union {
struct {
unsigned TMR1IF :1;
unsigned TMR2IF :1;
unsigned CCP1IF :1;
unsigned SSPIF :1;
unsigned TXIF :1;
unsigned RCIF :1;
unsigned ADIF :1;
};
struct {
unsigned :5;
unsigned RC1IF :1;
};
struct {
unsigned :4;
unsigned TX1IF :1;
};
} PIR1bits_t;
extern volatile PIR1bits_t PIR1bits @ 0xF9E;

# 2701
extern volatile unsigned char IPR1 @ 0xF9F;

asm("IPR1 equ 0F9Fh");


typedef union {
struct {
unsigned TMR1IP :1;
unsigned TMR2IP :1;
unsigned CCP1IP :1;
unsigned SSPIP :1;
unsigned TXIP :1;
unsigned RCIP :1;
unsigned ADIP :1;
};
struct {
unsigned :5;
unsigned RC1IP :1;
};
struct {
unsigned :4;
unsigned TX1IP :1;
};
} IPR1bits_t;
extern volatile IPR1bits_t IPR1bits @ 0xF9F;

# 2774
extern volatile unsigned char PIE2 @ 0xFA0;

asm("PIE2 equ 0FA0h");


typedef union {
struct {
unsigned CCP2IE :1;
unsigned TMR3IE :1;
unsigned HLVDIE :1;
unsigned BCLIE :1;
unsigned EEIE :1;
unsigned C2IE :1;
unsigned C1IE :1;
unsigned OSCFIE :1;
};
struct {
unsigned :2;
unsigned LVDIE :1;
};
struct {
unsigned :6;
unsigned CMIE :1;
};
} PIE2bits_t;
extern volatile PIE2bits_t PIE2bits @ 0xFA0;

# 2853
extern volatile unsigned char PIR2 @ 0xFA1;

asm("PIR2 equ 0FA1h");


typedef union {
struct {
unsigned CCP2IF :1;
unsigned TMR3IF :1;
unsigned HLVDIF :1;
unsigned BCLIF :1;
unsigned EEIF :1;
unsigned C2IF :1;
unsigned C1IF :1;
unsigned OSCFIF :1;
};
struct {
unsigned :2;
unsigned LVDIF :1;
};
struct {
unsigned :6;
unsigned CMIF :1;
};
} PIR2bits_t;
extern volatile PIR2bits_t PIR2bits @ 0xFA1;

# 2932
extern volatile unsigned char IPR2 @ 0xFA2;

asm("IPR2 equ 0FA2h");


typedef union {
struct {
unsigned CCP2IP :1;
unsigned TMR3IP :1;
unsigned HLVDIP :1;
unsigned BCLIP :1;
unsigned EEIP :1;
unsigned C2IP :1;
unsigned C1IP :1;
unsigned OSCFIP :1;
};
struct {
unsigned :2;
unsigned LVDIP :1;
};
struct {
unsigned :6;
unsigned CMIP :1;
};
} IPR2bits_t;
extern volatile IPR2bits_t IPR2bits @ 0xFA2;

# 3011
extern volatile unsigned char EECON1 @ 0xFA6;

asm("EECON1 equ 0FA6h");


typedef union {
struct {
unsigned RD :1;
unsigned WR :1;
unsigned WREN :1;
unsigned WRERR :1;
unsigned FREE :1;
unsigned :1;
unsigned CFGS :1;
unsigned EEPGD :1;
};
struct {
unsigned :6;
unsigned EEFS :1;
};
} EECON1bits_t;
extern volatile EECON1bits_t EECON1bits @ 0xFA6;

# 3076
extern volatile unsigned char EECON2 @ 0xFA7;

asm("EECON2 equ 0FA7h");



extern volatile unsigned char EEDATA @ 0xFA8;

asm("EEDATA equ 0FA8h");



extern volatile unsigned char EEADR @ 0xFA9;

asm("EEADR equ 0FA9h");


typedef union {
struct {
unsigned EEADR0 :1;
unsigned EEADR1 :1;
unsigned EEADR2 :1;
unsigned EEADR3 :1;
unsigned EEADR4 :1;
unsigned EEADR5 :1;
unsigned EEADR6 :1;
unsigned EEADR7 :1;
};
} EEADRbits_t;
extern volatile EEADRbits_t EEADRbits @ 0xFA9;

# 3149
extern volatile unsigned char EEADRH @ 0xFAA;

asm("EEADRH equ 0FAAh");


typedef union {
struct {
unsigned EEADR8 :1;
unsigned EEADR9 :1;
};
} EEADRHbits_t;
extern volatile EEADRHbits_t EEADRHbits @ 0xFAA;

# 3174
extern volatile unsigned char RCSTA @ 0xFAB;

asm("RCSTA equ 0FABh");


extern volatile unsigned char RCSTA1 @ 0xFAB;

asm("RCSTA1 equ 0FABh");


typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADEN :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned :6;
unsigned RC9 :1;
};
struct {
unsigned RCD8 :1;
};
} RCSTAbits_t;
extern volatile RCSTAbits_t RCSTAbits @ 0xFAB;

# 3283
typedef union {
struct {
unsigned RX9D :1;
unsigned OERR :1;
unsigned FERR :1;
unsigned ADDEN :1;
unsigned CREN :1;
unsigned SREN :1;
unsigned RX9 :1;
unsigned SPEN :1;
};
struct {
unsigned :3;
unsigned ADEN :1;
};
struct {
unsigned :5;
unsigned SRENA :1;
};
struct {
unsigned :6;
unsigned RC8_9 :1;
};
struct {
unsigned :6;
unsigned RC9 :1;
};
struct {
unsigned RCD8 :1;
};
} RCSTA1bits_t;
extern volatile RCSTA1bits_t RCSTA1bits @ 0xFAB;

# 3383
extern volatile unsigned char TXSTA @ 0xFAC;

asm("TXSTA equ 0FACh");


extern volatile unsigned char TXSTA1 @ 0xFAC;

asm("TXSTA1 equ 0FACh");


typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned :2;
unsigned BRGH1 :1;
};
struct {
unsigned :7;
unsigned CSRC1 :1;
};
struct {
unsigned :3;
unsigned SENDB1 :1;
};
struct {
unsigned :4;
unsigned SYNC1 :1;
};
struct {
unsigned :1;
unsigned TRMT1 :1;
};
struct {
unsigned :6;
unsigned TX91 :1;
};
struct {
unsigned TX9D1 :1;
};
struct {
unsigned :5;
unsigned TXEN1 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
struct {
unsigned TXD8 :1;
};
} TXSTAbits_t;
extern volatile TXSTAbits_t TXSTAbits @ 0xFAC;

# 3536
typedef union {
struct {
unsigned TX9D :1;
unsigned TRMT :1;
unsigned BRGH :1;
unsigned SENDB :1;
unsigned SYNC :1;
unsigned TXEN :1;
unsigned TX9 :1;
unsigned CSRC :1;
};
struct {
unsigned :2;
unsigned BRGH1 :1;
};
struct {
unsigned :7;
unsigned CSRC1 :1;
};
struct {
unsigned :3;
unsigned SENDB1 :1;
};
struct {
unsigned :4;
unsigned SYNC1 :1;
};
struct {
unsigned :1;
unsigned TRMT1 :1;
};
struct {
unsigned :6;
unsigned TX91 :1;
};
struct {
unsigned TX9D1 :1;
};
struct {
unsigned :5;
unsigned TXEN1 :1;
};
struct {
unsigned :6;
unsigned TX8_9 :1;
};
struct {
unsigned TXD8 :1;
};
} TXSTA1bits_t;
extern volatile TXSTA1bits_t TXSTA1bits @ 0xFAC;

# 3680
extern volatile unsigned char TXREG @ 0xFAD;

asm("TXREG equ 0FADh");


extern volatile unsigned char TXREG1 @ 0xFAD;

asm("TXREG1 equ 0FADh");



extern volatile unsigned char RCREG @ 0xFAE;

asm("RCREG equ 0FAEh");


extern volatile unsigned char RCREG1 @ 0xFAE;

asm("RCREG1 equ 0FAEh");



extern volatile unsigned char SPBRG @ 0xFAF;

asm("SPBRG equ 0FAFh");


extern volatile unsigned char SPBRG1 @ 0xFAF;

asm("SPBRG1 equ 0FAFh");



extern volatile unsigned char SPBRGH @ 0xFB0;

asm("SPBRGH equ 0FB0h");



extern volatile unsigned char T3CON @ 0xFB1;

asm("T3CON equ 0FB1h");


typedef union {
struct {
unsigned :2;
unsigned NOT_T3SYNC :1;
};
struct {
unsigned TMR3ON :1;
unsigned TMR3CS :1;
unsigned nT3SYNC :1;
unsigned T3CCP1 :1;
unsigned T3CKPS :2;
unsigned T3CCP2 :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T3SYNC :1;
unsigned :1;
unsigned T3CKPS0 :1;
unsigned T3CKPS1 :1;
};
struct {
unsigned :7;
unsigned RD163 :1;
};
struct {
unsigned :3;
unsigned SOSCEN3 :1;
};
struct {
unsigned :7;
unsigned T3RD16 :1;
};
} T3CONbits_t;
extern volatile T3CONbits_t T3CONbits @ 0xFB1;

# 3832
extern volatile unsigned short TMR3 @ 0xFB2;

asm("TMR3 equ 0FB2h");



extern volatile unsigned char TMR3L @ 0xFB2;

asm("TMR3L equ 0FB2h");



extern volatile unsigned char TMR3H @ 0xFB3;

asm("TMR3H equ 0FB3h");



extern volatile unsigned char CVRCON2 @ 0xFB4;

asm("CVRCON2 equ 0FB4h");


typedef union {
struct {
unsigned :6;
unsigned FVRST :1;
unsigned FVREN :1;
};
} CVRCON2bits_t;
extern volatile CVRCON2bits_t CVRCON2bits @ 0xFB4;

# 3876
extern volatile unsigned char CVRCON @ 0xFB5;

asm("CVRCON equ 0FB5h");


typedef union {
struct {
unsigned CVR :4;
unsigned CVRSS :1;
unsigned CVRR :1;
unsigned CVROE :1;
unsigned CVREN :1;
};
struct {
unsigned CVR0 :1;
unsigned CVR1 :1;
unsigned CVR2 :1;
unsigned CVR3 :1;
};
struct {
unsigned :6;
unsigned CVROEN :1;
};
} CVRCONbits_t;
extern volatile CVRCONbits_t CVRCONbits @ 0xFB5;

# 3954
extern volatile unsigned char ECCP1AS @ 0xFB6;

asm("ECCP1AS equ 0FB6h");


typedef union {
struct {
unsigned PSSBD :2;
unsigned PSSAC :2;
unsigned ECCPAS :3;
unsigned ECCPASE :1;
};
struct {
unsigned PSSBD0 :1;
unsigned PSSBD1 :1;
unsigned PSSAC0 :1;
unsigned PSSAC1 :1;
unsigned ECCPAS0 :1;
unsigned ECCPAS1 :1;
unsigned ECCPAS2 :1;
};
} ECCP1ASbits_t;
extern volatile ECCP1ASbits_t ECCP1ASbits @ 0xFB6;

# 4035
extern volatile unsigned char PWM1CON @ 0xFB7;

asm("PWM1CON equ 0FB7h");


typedef union {
struct {
unsigned PDC :7;
unsigned PRSEN :1;
};
struct {
unsigned PDC0 :1;
unsigned PDC1 :1;
unsigned PDC2 :1;
unsigned PDC3 :1;
unsigned PDC4 :1;
unsigned PDC5 :1;
unsigned PDC6 :1;
};
} PWM1CONbits_t;
extern volatile PWM1CONbits_t PWM1CONbits @ 0xFB7;

# 4104
extern volatile unsigned char BAUDCON @ 0xFB8;

asm("BAUDCON equ 0FB8h");


extern volatile unsigned char BAUDCTL @ 0xFB8;

asm("BAUDCTL equ 0FB8h");


typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned CKTXP :1;
unsigned DTRXP :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :4;
unsigned SCKP :1;
};
struct {
unsigned :5;
unsigned RXCKP :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCONbits_t;
extern volatile BAUDCONbits_t BAUDCONbits @ 0xFB8;

# 4191
typedef union {
struct {
unsigned ABDEN :1;
unsigned WUE :1;
unsigned :1;
unsigned BRG16 :1;
unsigned CKTXP :1;
unsigned DTRXP :1;
unsigned RCIDL :1;
unsigned ABDOVF :1;
};
struct {
unsigned :4;
unsigned SCKP :1;
};
struct {
unsigned :5;
unsigned RXCKP :1;
};
struct {
unsigned :1;
unsigned W4E :1;
};
} BAUDCTLbits_t;
extern volatile BAUDCTLbits_t BAUDCTLbits @ 0xFB8;

# 4269
extern volatile unsigned char PSTRCON @ 0xFB9;

asm("PSTRCON equ 0FB9h");


typedef union {
struct {
unsigned STRA :1;
unsigned STRB :1;
unsigned STRC :1;
unsigned STRD :1;
unsigned STRSYNC :1;
};
} PSTRCONbits_t;
extern volatile PSTRCONbits_t PSTRCONbits @ 0xFB9;

# 4312
extern volatile unsigned char CCP2CON @ 0xFBA;

asm("CCP2CON equ 0FBAh");


typedef union {
struct {
unsigned CCP2M :4;
unsigned DC2B :2;
};
struct {
unsigned CCP2M0 :1;
unsigned CCP2M1 :1;
unsigned CCP2M2 :1;
unsigned CCP2M3 :1;
unsigned DC2B0 :1;
unsigned DC2B1 :1;
};
} CCP2CONbits_t;
extern volatile CCP2CONbits_t CCP2CONbits @ 0xFBA;

# 4375
extern volatile unsigned short CCPR2 @ 0xFBB;

asm("CCPR2 equ 0FBBh");



extern volatile unsigned char CCPR2L @ 0xFBB;

asm("CCPR2L equ 0FBBh");



extern volatile unsigned char CCPR2H @ 0xFBC;

asm("CCPR2H equ 0FBCh");



extern volatile unsigned char CCP1CON @ 0xFBD;

asm("CCP1CON equ 0FBDh");


typedef union {
struct {
unsigned CCP1M :4;
unsigned DC1B :2;
unsigned P1M :2;
};
struct {
unsigned CCP1M0 :1;
unsigned CCP1M1 :1;
unsigned CCP1M2 :1;
unsigned CCP1M3 :1;
unsigned DC1B0 :1;
unsigned DC1B1 :1;
unsigned P1M0 :1;
unsigned P1M1 :1;
};
} CCP1CONbits_t;
extern volatile CCP1CONbits_t CCP1CONbits @ 0xFBD;

# 4474
extern volatile unsigned short CCPR1 @ 0xFBE;

asm("CCPR1 equ 0FBEh");



extern volatile unsigned char CCPR1L @ 0xFBE;

asm("CCPR1L equ 0FBEh");



extern volatile unsigned char CCPR1H @ 0xFBF;

asm("CCPR1H equ 0FBFh");



extern volatile unsigned char ADCON2 @ 0xFC0;

asm("ADCON2 equ 0FC0h");


typedef union {
struct {
unsigned ADCS :3;
unsigned ACQT :3;
unsigned :1;
unsigned ADFM :1;
};
struct {
unsigned ADCS0 :1;
unsigned ADCS1 :1;
unsigned ADCS2 :1;
unsigned ACQT0 :1;
unsigned ACQT1 :1;
unsigned ACQT2 :1;
};
} ADCON2bits_t;
extern volatile ADCON2bits_t ADCON2bits @ 0xFC0;

# 4562
extern volatile unsigned char ADCON1 @ 0xFC1;

asm("ADCON1 equ 0FC1h");


typedef union {
struct {
unsigned :4;
unsigned VCFG :2;
};
struct {
unsigned :4;
unsigned VCFG0 :1;
unsigned VCFG1 :1;
};
struct {
unsigned :4;
unsigned VCFG01 :1;
};
struct {
unsigned :5;
unsigned VCFG11 :1;
};
} ADCON1bits_t;
extern volatile ADCON1bits_t ADCON1bits @ 0xFC1;

# 4615
extern volatile unsigned char ADCON0 @ 0xFC2;

asm("ADCON0 equ 0FC2h");


typedef union {
struct {
unsigned :1;
unsigned GO_NOT_DONE :1;
};
struct {
unsigned ADON :1;
unsigned GO_nDONE :1;
unsigned CHS :4;
};
struct {
unsigned :1;
unsigned DONE :1;
unsigned CHS0 :1;
unsigned CHS1 :1;
unsigned CHS2 :1;
unsigned CHS3 :1;
};
struct {
unsigned :1;
unsigned NOT_DONE :1;
};
struct {
unsigned :1;
unsigned nDONE :1;
};
struct {
unsigned :1;
unsigned GO_DONE :1;
};
struct {
unsigned :1;
unsigned GO :1;
};
struct {
unsigned :1;
unsigned GODONE :1;
};
} ADCON0bits_t;
extern volatile ADCON0bits_t ADCON0bits @ 0xFC2;

# 4733
extern volatile unsigned short ADRES @ 0xFC3;

asm("ADRES equ 0FC3h");



extern volatile unsigned char ADRESL @ 0xFC3;

asm("ADRESL equ 0FC3h");



extern volatile unsigned char ADRESH @ 0xFC4;

asm("ADRESH equ 0FC4h");



extern volatile unsigned char SSPCON2 @ 0xFC5;

asm("SSPCON2 equ 0FC5h");


typedef union {
struct {
unsigned SEN :1;
unsigned RSEN :1;
unsigned PEN :1;
unsigned RCEN :1;
unsigned ACKEN :1;
unsigned ACKDT :1;
unsigned ACKSTAT :1;
unsigned GCEN :1;
};
} SSPCON2bits_t;
extern volatile SSPCON2bits_t SSPCON2bits @ 0xFC5;

# 4812
extern volatile unsigned char SSPCON1 @ 0xFC6;

asm("SSPCON1 equ 0FC6h");


typedef union {
struct {
unsigned SSPM :4;
unsigned CKP :1;
unsigned SSPEN :1;
unsigned SSPOV :1;
unsigned WCOL :1;
};
struct {
unsigned SSPM0 :1;
unsigned SSPM1 :1;
unsigned SSPM2 :1;
unsigned SSPM3 :1;
};
} SSPCON1bits_t;
extern volatile SSPCON1bits_t SSPCON1bits @ 0xFC6;

# 4881
extern volatile unsigned char SSPSTAT @ 0xFC7;

asm("SSPSTAT equ 0FC7h");


typedef union {
struct {
unsigned :2;
unsigned R_NOT_W :1;
};
struct {
unsigned :5;
unsigned D_NOT_A :1;
};
struct {
unsigned BF :1;
unsigned UA :1;
unsigned R_nW :1;
unsigned S :1;
unsigned P :1;
unsigned D_nA :1;
unsigned CKE :1;
unsigned SMP :1;
};
struct {
unsigned :2;
unsigned R :1;
unsigned :2;
unsigned D :1;
};
struct {
unsigned :2;
unsigned W :1;
unsigned :2;
unsigned A :1;
};
struct {
unsigned :2;
unsigned nW :1;
unsigned :2;
unsigned nA :1;
};
struct {
unsigned :2;
unsigned R_W :1;
unsigned :2;
unsigned D_A :1;
};
struct {
unsigned :2;
unsigned NOT_WRITE :1;
};
struct {
unsigned :5;
unsigned NOT_ADDRESS :1;
};
struct {
unsigned :2;
unsigned nWRITE :1;
unsigned :2;
unsigned nADDRESS :1;
};
struct {
unsigned :3;
unsigned START :1;
unsigned STOP :1;
};
struct {
unsigned :5;
unsigned DA :1;
};
struct {
unsigned :2;
unsigned RW :1;
};
struct {
unsigned :2;
unsigned NOT_W :1;
};
struct {
unsigned :5;
unsigned NOT_A :1;
};
} SSPSTATbits_t;
extern volatile SSPSTATbits_t SSPSTATbits @ 0xFC7;

# 5109
extern volatile unsigned char SSPADD @ 0xFC8;

asm("SSPADD equ 0FC8h");



extern volatile unsigned char SSPBUF @ 0xFC9;

asm("SSPBUF equ 0FC9h");



extern volatile unsigned char T2CON @ 0xFCA;

asm("T2CON equ 0FCAh");


typedef union {
struct {
unsigned T2CKPS :2;
unsigned TMR2ON :1;
unsigned T2OUTPS :4;
};
struct {
unsigned T2CKPS0 :1;
unsigned T2CKPS1 :1;
unsigned :1;
unsigned T2OUTPS0 :1;
unsigned T2OUTPS1 :1;
unsigned T2OUTPS2 :1;
unsigned T2OUTPS3 :1;
};
} T2CONbits_t;
extern volatile T2CONbits_t T2CONbits @ 0xFCA;

# 5191
extern volatile unsigned char PR2 @ 0xFCB;

asm("PR2 equ 0FCBh");


extern volatile unsigned char MEMCON @ 0xFCB;

asm("MEMCON equ 0FCBh");


typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} PR2bits_t;
extern volatile PR2bits_t PR2bits @ 0xFCB;

# 5250
typedef union {
struct {
unsigned :7;
unsigned EBDIS :1;
};
struct {
unsigned :4;
unsigned WAIT0 :1;
};
struct {
unsigned :5;
unsigned WAIT1 :1;
};
struct {
unsigned WM0 :1;
};
struct {
unsigned :1;
unsigned WM1 :1;
};
} MEMCONbits_t;
extern volatile MEMCONbits_t MEMCONbits @ 0xFCB;

# 5300
extern volatile unsigned char TMR2 @ 0xFCC;

asm("TMR2 equ 0FCCh");



extern volatile unsigned char T1CON @ 0xFCD;

asm("T1CON equ 0FCDh");


typedef union {
struct {
unsigned :2;
unsigned NOT_T1SYNC :1;
};
struct {
unsigned TMR1ON :1;
unsigned TMR1CS :1;
unsigned nT1SYNC :1;
unsigned T1OSCEN :1;
unsigned T1CKPS :2;
unsigned T1RUN :1;
unsigned RD16 :1;
};
struct {
unsigned :2;
unsigned T1SYNC :1;
unsigned :1;
unsigned T1CKPS0 :1;
unsigned T1CKPS1 :1;
};
struct {
unsigned :3;
unsigned SOSCEN :1;
};
struct {
unsigned :7;
unsigned T1RD16 :1;
};
} T1CONbits_t;
extern volatile T1CONbits_t T1CONbits @ 0xFCD;

# 5410
extern volatile unsigned short TMR1 @ 0xFCE;

asm("TMR1 equ 0FCEh");



extern volatile unsigned char TMR1L @ 0xFCE;

asm("TMR1L equ 0FCEh");



extern volatile unsigned char TMR1H @ 0xFCF;

asm("TMR1H equ 0FCFh");



extern volatile unsigned char RCON @ 0xFD0;

asm("RCON equ 0FD0h");


typedef union {
struct {
unsigned NOT_BOR :1;
};
struct {
unsigned :1;
unsigned NOT_POR :1;
};
struct {
unsigned :2;
unsigned NOT_PD :1;
};
struct {
unsigned :3;
unsigned NOT_TO :1;
};
struct {
unsigned :4;
unsigned NOT_RI :1;
};
struct {
unsigned nBOR :1;
unsigned nPOR :1;
unsigned nPD :1;
unsigned nTO :1;
unsigned nRI :1;
unsigned :1;
unsigned SBOREN :1;
unsigned IPEN :1;
};
struct {
unsigned BOR :1;
unsigned POR :1;
unsigned PD :1;
unsigned TO :1;
unsigned RI :1;
};
} RCONbits_t;
extern volatile RCONbits_t RCONbits @ 0xFD0;

# 5560
extern volatile unsigned char WDTCON @ 0xFD1;

asm("WDTCON equ 0FD1h");


typedef union {
struct {
unsigned SWDTEN :1;
};
struct {
unsigned SWDTE :1;
};
} WDTCONbits_t;
extern volatile WDTCONbits_t WDTCONbits @ 0xFD1;

# 5587
extern volatile unsigned char HLVDCON @ 0xFD2;

asm("HLVDCON equ 0FD2h");


extern volatile unsigned char LVDCON @ 0xFD2;

asm("LVDCON equ 0FD2h");


typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
} HLVDCONbits_t;
extern volatile HLVDCONbits_t HLVDCONbits @ 0xFD2;

# 5726
typedef union {
struct {
unsigned HLVDL :4;
unsigned HLVDEN :1;
unsigned IRVST :1;
unsigned :1;
unsigned VDIRMAG :1;
};
struct {
unsigned HLVDL0 :1;
unsigned HLVDL1 :1;
unsigned HLVDL2 :1;
unsigned HLVDL3 :1;
};
struct {
unsigned LVDL0 :1;
unsigned LVDL1 :1;
unsigned LVDL2 :1;
unsigned LVDL3 :1;
unsigned LVDEN :1;
unsigned IVRST :1;
};
struct {
unsigned LVV0 :1;
unsigned LVV1 :1;
unsigned LVV2 :1;
unsigned LVV3 :1;
unsigned :1;
unsigned BGST :1;
};
} LVDCONbits_t;
extern volatile LVDCONbits_t LVDCONbits @ 0xFD2;

# 5856
extern volatile unsigned char OSCCON @ 0xFD3;

asm("OSCCON equ 0FD3h");


typedef union {
struct {
unsigned SCS :2;
unsigned IOFS :1;
unsigned OSTS :1;
unsigned IRCF :3;
unsigned IDLEN :1;
};
struct {
unsigned SCS0 :1;
unsigned SCS1 :1;
unsigned :2;
unsigned IRCF0 :1;
unsigned IRCF1 :1;
unsigned IRCF2 :1;
};
} OSCCONbits_t;
extern volatile OSCCONbits_t OSCCONbits @ 0xFD3;

# 5932
extern volatile unsigned char T0CON @ 0xFD5;

asm("T0CON equ 0FD5h");


typedef union {
struct {
unsigned T0PS :3;
unsigned PSA :1;
unsigned T0SE :1;
unsigned T0CS :1;
unsigned T08BIT :1;
unsigned TMR0ON :1;
};
struct {
unsigned T0PS0 :1;
unsigned T0PS1 :1;
unsigned T0PS2 :1;
};
} T0CONbits_t;
extern volatile T0CONbits_t T0CONbits @ 0xFD5;

# 6001
extern volatile unsigned short TMR0 @ 0xFD6;

asm("TMR0 equ 0FD6h");



extern volatile unsigned char TMR0L @ 0xFD6;

asm("TMR0L equ 0FD6h");



extern volatile unsigned char TMR0H @ 0xFD7;

asm("TMR0H equ 0FD7h");



extern volatile unsigned char STATUS @ 0xFD8;

asm("STATUS equ 0FD8h");


typedef union {
struct {
unsigned C :1;
unsigned DC :1;
unsigned Z :1;
unsigned OV :1;
unsigned N :1;
};
struct {
unsigned CARRY :1;
};
struct {
unsigned :4;
unsigned NEGATIVE :1;
};
struct {
unsigned :3;
unsigned OVERFLOW :1;
};
struct {
unsigned :2;
unsigned ZERO :1;
};
} STATUSbits_t;
extern volatile STATUSbits_t STATUSbits @ 0xFD8;

# 6097
extern volatile unsigned short FSR2 @ 0xFD9;

asm("FSR2 equ 0FD9h");



extern volatile unsigned char FSR2L @ 0xFD9;

asm("FSR2L equ 0FD9h");



extern volatile unsigned char FSR2H @ 0xFDA;

asm("FSR2H equ 0FDAh");



extern volatile unsigned char PLUSW2 @ 0xFDB;

asm("PLUSW2 equ 0FDBh");



extern volatile unsigned char PREINC2 @ 0xFDC;

asm("PREINC2 equ 0FDCh");



extern volatile unsigned char POSTDEC2 @ 0xFDD;

asm("POSTDEC2 equ 0FDDh");



extern volatile unsigned char POSTINC2 @ 0xFDE;

asm("POSTINC2 equ 0FDEh");



extern volatile unsigned char INDF2 @ 0xFDF;

asm("INDF2 equ 0FDFh");



extern volatile unsigned char BSR @ 0xFE0;

asm("BSR equ 0FE0h");



extern volatile unsigned short FSR1 @ 0xFE1;

asm("FSR1 equ 0FE1h");



extern volatile unsigned char FSR1L @ 0xFE1;

asm("FSR1L equ 0FE1h");



extern volatile unsigned char FSR1H @ 0xFE2;

asm("FSR1H equ 0FE2h");



extern volatile unsigned char PLUSW1 @ 0xFE3;

asm("PLUSW1 equ 0FE3h");



extern volatile unsigned char PREINC1 @ 0xFE4;

asm("PREINC1 equ 0FE4h");



extern volatile unsigned char POSTDEC1 @ 0xFE5;

asm("POSTDEC1 equ 0FE5h");



extern volatile unsigned char POSTINC1 @ 0xFE6;

asm("POSTINC1 equ 0FE6h");



extern volatile unsigned char INDF1 @ 0xFE7;

asm("INDF1 equ 0FE7h");



extern volatile unsigned char WREG @ 0xFE8;

asm("WREG equ 0FE8h");

# 6210
extern volatile unsigned short FSR0 @ 0xFE9;

asm("FSR0 equ 0FE9h");



extern volatile unsigned char FSR0L @ 0xFE9;

asm("FSR0L equ 0FE9h");



extern volatile unsigned char FSR0H @ 0xFEA;

asm("FSR0H equ 0FEAh");



extern volatile unsigned char PLUSW0 @ 0xFEB;

asm("PLUSW0 equ 0FEBh");



extern volatile unsigned char PREINC0 @ 0xFEC;

asm("PREINC0 equ 0FECh");



extern volatile unsigned char POSTDEC0 @ 0xFED;

asm("POSTDEC0 equ 0FEDh");



extern volatile unsigned char POSTINC0 @ 0xFEE;

asm("POSTINC0 equ 0FEEh");



extern volatile unsigned char INDF0 @ 0xFEF;

asm("INDF0 equ 0FEFh");



extern volatile unsigned char INTCON3 @ 0xFF0;

asm("INTCON3 equ 0FF0h");


typedef union {
struct {
unsigned INT1IF :1;
unsigned INT2IF :1;
unsigned :1;
unsigned INT1IE :1;
unsigned INT2IE :1;
unsigned :1;
unsigned INT1IP :1;
unsigned INT2IP :1;
};
struct {
unsigned INT1F :1;
unsigned INT2F :1;
unsigned :1;
unsigned INT1E :1;
unsigned INT2E :1;
unsigned :1;
unsigned INT1P :1;
unsigned INT2P :1;
};
} INTCON3bits_t;
extern volatile INTCON3bits_t INTCON3bits @ 0xFF0;

# 6349
extern volatile unsigned char INTCON2 @ 0xFF1;

asm("INTCON2 equ 0FF1h");


typedef union {
struct {
unsigned :7;
unsigned NOT_RBPU :1;
};
struct {
unsigned RBIP :1;
unsigned :1;
unsigned TMR0IP :1;
unsigned :1;
unsigned INTEDG2 :1;
unsigned INTEDG1 :1;
unsigned INTEDG0 :1;
unsigned nRBPU :1;
};
struct {
unsigned :7;
unsigned RBPU :1;
};
} INTCON2bits_t;
extern volatile INTCON2bits_t INTCON2bits @ 0xFF1;

# 6418
extern volatile unsigned char INTCON @ 0xFF2;

asm("INTCON equ 0FF2h");


typedef union {
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned PEIE_GIEL :1;
unsigned GIE_GIEH :1;
};
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned RBIF :1;
unsigned INT0IF :1;
unsigned TMR0IF :1;
unsigned RBIE :1;
unsigned INT0IE :1;
unsigned TMR0IE :1;
unsigned GIEL :1;
unsigned GIEH :1;
};
struct {
unsigned :1;
unsigned INT0F :1;
unsigned T0IF :1;
unsigned :1;
unsigned INT0E :1;
unsigned T0IE :1;
unsigned PEIE :1;
unsigned GIE :1;
};
struct {
unsigned :6;
unsigned GIEL :1;
unsigned GIEH :1;
};
} INTCONbits_t;
extern volatile INTCONbits_t INTCONbits @ 0xFF2;

# 6554
extern volatile unsigned short PROD @ 0xFF3;

asm("PROD equ 0FF3h");



extern volatile unsigned char PRODL @ 0xFF3;

asm("PRODL equ 0FF3h");



extern volatile unsigned char PRODH @ 0xFF4;

asm("PRODH equ 0FF4h");



extern volatile unsigned char TABLAT @ 0xFF5;

asm("TABLAT equ 0FF5h");




extern volatile unsigned short long TBLPTR @ 0xFF6;


asm("TBLPTR equ 0FF6h");



extern volatile unsigned char TBLPTRL @ 0xFF6;

asm("TBLPTRL equ 0FF6h");



extern volatile unsigned char TBLPTRH @ 0xFF7;

asm("TBLPTRH equ 0FF7h");



extern volatile unsigned char TBLPTRU @ 0xFF8;

asm("TBLPTRU equ 0FF8h");




extern volatile unsigned short long PCLAT @ 0xFF9;


asm("PCLAT equ 0FF9h");



extern volatile unsigned short long PC @ 0xFF9;


asm("PC equ 0FF9h");



extern volatile unsigned char PCL @ 0xFF9;

asm("PCL equ 0FF9h");



extern volatile unsigned char PCLATH @ 0xFFA;

asm("PCLATH equ 0FFAh");



extern volatile unsigned char PCLATU @ 0xFFB;

asm("PCLATU equ 0FFBh");



extern volatile unsigned char STKPTR @ 0xFFC;

asm("STKPTR equ 0FFCh");


typedef union {
struct {
unsigned STKPTR :5;
unsigned :1;
unsigned STKUNF :1;
unsigned STKFUL :1;
};
struct {
unsigned SP0 :1;
unsigned SP1 :1;
unsigned SP2 :1;
unsigned SP3 :1;
unsigned SP4 :1;
unsigned :2;
unsigned STKOVF :1;
};
} STKPTRbits_t;
extern volatile STKPTRbits_t STKPTRbits @ 0xFFC;

# 6709
extern volatile unsigned short long TOS @ 0xFFD;


asm("TOS equ 0FFDh");



extern volatile unsigned char TOSL @ 0xFFD;

asm("TOSL equ 0FFDh");



extern volatile unsigned char TOSH @ 0xFFE;

asm("TOSH equ 0FFEh");



extern volatile unsigned char TOSU @ 0xFFF;

asm("TOSU equ 0FFFh");

# 6740
extern volatile __bit ABDEN @ (((unsigned) &BAUDCON)*8) + 0;

extern volatile __bit ABDOVF @ (((unsigned) &BAUDCON)*8) + 7;

extern volatile __bit ACKDT @ (((unsigned) &SSPCON2)*8) + 5;

extern volatile __bit ACKEN @ (((unsigned) &SSPCON2)*8) + 4;

extern volatile __bit ACKSTAT @ (((unsigned) &SSPCON2)*8) + 6;

extern volatile __bit ACQT0 @ (((unsigned) &ADCON2)*8) + 3;

extern volatile __bit ACQT1 @ (((unsigned) &ADCON2)*8) + 4;

extern volatile __bit ACQT2 @ (((unsigned) &ADCON2)*8) + 5;

extern volatile __bit ADCS0 @ (((unsigned) &ADCON2)*8) + 0;

extern volatile __bit ADCS1 @ (((unsigned) &ADCON2)*8) + 1;

extern volatile __bit ADCS2 @ (((unsigned) &ADCON2)*8) + 2;

extern volatile __bit ADDEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADEN @ (((unsigned) &RCSTA)*8) + 3;

extern volatile __bit ADFM @ (((unsigned) &ADCON2)*8) + 7;

extern volatile __bit ADIE @ (((unsigned) &PIE1)*8) + 6;

extern volatile __bit ADIF @ (((unsigned) &PIR1)*8) + 6;

extern volatile __bit ADIP @ (((unsigned) &IPR1)*8) + 6;

extern volatile __bit ADON @ (((unsigned) &ADCON0)*8) + 0;

extern volatile __bit AN0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit AN1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit AN10 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit AN11 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit AN12 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit AN2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit AN3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit AN4 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit AN8 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit AN9 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit ANS0 @ (((unsigned) &ANSEL)*8) + 0;

extern volatile __bit ANS1 @ (((unsigned) &ANSEL)*8) + 1;

extern volatile __bit ANS10 @ (((unsigned) &ANSELH)*8) + 2;

extern volatile __bit ANS11 @ (((unsigned) &ANSELH)*8) + 3;

extern volatile __bit ANS12 @ (((unsigned) &ANSELH)*8) + 4;

extern volatile __bit ANS2 @ (((unsigned) &ANSEL)*8) + 2;

extern volatile __bit ANS3 @ (((unsigned) &ANSEL)*8) + 3;

extern volatile __bit ANS4 @ (((unsigned) &ANSEL)*8) + 4;

extern volatile __bit ANS8 @ (((unsigned) &ANSELH)*8) + 0;

extern volatile __bit ANS9 @ (((unsigned) &ANSELH)*8) + 1;

extern volatile __bit BCLIE @ (((unsigned) &PIE2)*8) + 3;

extern volatile __bit BCLIF @ (((unsigned) &PIR2)*8) + 3;

extern volatile __bit BCLIP @ (((unsigned) &IPR2)*8) + 3;

extern volatile __bit BF @ (((unsigned) &SSPSTAT)*8) + 0;

extern volatile __bit BGST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit BRG16 @ (((unsigned) &BAUDCON)*8) + 3;

extern volatile __bit BRGH @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit BRGH1 @ (((unsigned) &TXSTA)*8) + 2;

extern volatile __bit C12IN0M @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit C12IN0N @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit C12IN1M @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit C12IN1N @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit C12IN2M @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit C12IN2N @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit C12IN3M @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit C12IN3N @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit C1CH0 @ (((unsigned) &CM1CON0)*8) + 0;

extern volatile __bit C1CH1 @ (((unsigned) &CM1CON0)*8) + 1;

extern volatile __bit C1IE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit C1IF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit C1INP @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit C1IP @ (((unsigned) &IPR2)*8) + 6;

extern volatile __bit C1OE @ (((unsigned) &CM1CON0)*8) + 5;

extern volatile __bit C1ON @ (((unsigned) &CM1CON0)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) C1OUT @ (((unsigned) &CM1CON0)*8) + 6;

extern volatile __bit C1POL @ (((unsigned) &CM1CON0)*8) + 4;

extern volatile __bit C1R @ (((unsigned) &CM1CON0)*8) + 2;

extern volatile __bit C1RSEL @ (((unsigned) &CM2CON1)*8) + 5;

extern volatile __bit C1SP @ (((unsigned) &CM1CON0)*8) + 3;

extern volatile __bit C2CH0 @ (((unsigned) &CM2CON0)*8) + 0;

extern volatile __bit C2CH1 @ (((unsigned) &CM2CON0)*8) + 1;

extern volatile __bit C2IE @ (((unsigned) &PIE2)*8) + 5;

extern volatile __bit C2IF @ (((unsigned) &PIR2)*8) + 5;

extern volatile __bit C2INP @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit C2IP @ (((unsigned) &IPR2)*8) + 5;

extern volatile __bit C2OE @ (((unsigned) &CM2CON0)*8) + 5;

extern volatile __bit C2ON @ (((unsigned) &CM2CON0)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) C2OUT @ (((unsigned) &CM2CON0)*8) + 6;

extern volatile __bit C2POL @ (((unsigned) &CM2CON0)*8) + 4;

extern volatile __bit C2R @ (((unsigned) &CM2CON0)*8) + 2;

extern volatile __bit C2RSEL @ (((unsigned) &CM2CON1)*8) + 4;

extern volatile __bit C2SP @ (((unsigned) &CM2CON0)*8) + 3;

extern volatile __bit CARRY @ (((unsigned) &STATUS)*8) + 0;

extern volatile __bit CCP1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit CCP10 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit CCP1IE @ (((unsigned) &PIE1)*8) + 2;

extern volatile __bit CCP1IF @ (((unsigned) &PIR1)*8) + 2;

extern volatile __bit CCP1IP @ (((unsigned) &IPR1)*8) + 2;

extern volatile __bit CCP1M0 @ (((unsigned) &CCP1CON)*8) + 0;

extern volatile __bit CCP1M1 @ (((unsigned) &CCP1CON)*8) + 1;

extern volatile __bit CCP1M2 @ (((unsigned) &CCP1CON)*8) + 2;

extern volatile __bit CCP1M3 @ (((unsigned) &CCP1CON)*8) + 3;

extern volatile __bit CCP2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit CCP2IE @ (((unsigned) &PIE2)*8) + 0;

extern volatile __bit CCP2IF @ (((unsigned) &PIR2)*8) + 0;

extern volatile __bit CCP2IP @ (((unsigned) &IPR2)*8) + 0;

extern volatile __bit CCP2M0 @ (((unsigned) &CCP2CON)*8) + 0;

extern volatile __bit CCP2M1 @ (((unsigned) &CCP2CON)*8) + 1;

extern volatile __bit CCP2M2 @ (((unsigned) &CCP2CON)*8) + 2;

extern volatile __bit CCP2M3 @ (((unsigned) &CCP2CON)*8) + 3;

extern volatile __bit CCP2_PA2 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit CCP6E @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit CCP7E @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit CCP8E @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit CCP9E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit CFGS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit CHS0 @ (((unsigned) &ADCON0)*8) + 2;

extern volatile __bit CHS1 @ (((unsigned) &ADCON0)*8) + 3;

extern volatile __bit CHS2 @ (((unsigned) &ADCON0)*8) + 4;

extern volatile __bit CHS3 @ (((unsigned) &ADCON0)*8) + 5;

extern volatile __bit CK @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit CKE @ (((unsigned) &SSPSTAT)*8) + 6;

extern volatile __bit CKP @ (((unsigned) &SSPCON1)*8) + 4;

extern volatile __bit CKTXP @ (((unsigned) &BAUDCON)*8) + 4;

extern volatile __bit CMIE @ (((unsigned) &PIE2)*8) + 6;

extern volatile __bit CMIF @ (((unsigned) &PIR2)*8) + 6;

extern volatile __bit CMIP @ (((unsigned) &IPR2)*8) + 6;

extern volatile __bit CREN @ (((unsigned) &RCSTA)*8) + 4;

extern volatile __bit CS @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit CSRC @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CSRC1 @ (((unsigned) &TXSTA)*8) + 7;

extern volatile __bit CVR0 @ (((unsigned) &CVRCON)*8) + 0;

extern volatile __bit CVR1 @ (((unsigned) &CVRCON)*8) + 1;

extern volatile __bit CVR2 @ (((unsigned) &CVRCON)*8) + 2;

extern volatile __bit CVR3 @ (((unsigned) &CVRCON)*8) + 3;

extern volatile __bit CVREF @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit CVREN @ (((unsigned) &CVRCON)*8) + 7;

extern volatile __bit CVROE @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVROEN @ (((unsigned) &CVRCON)*8) + 6;

extern volatile __bit CVRR @ (((unsigned) &CVRCON)*8) + 5;

extern volatile __bit CVRSS @ (((unsigned) &CVRCON)*8) + 4;

extern volatile __bit DA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit DC @ (((unsigned) &STATUS)*8) + 1;

extern volatile __bit DC1B0 @ (((unsigned) &CCP1CON)*8) + 4;

extern volatile __bit DC1B1 @ (((unsigned) &CCP1CON)*8) + 5;

extern volatile __bit DC2B0 @ (((unsigned) &CCP2CON)*8) + 4;

extern volatile __bit DC2B1 @ (((unsigned) &CCP2CON)*8) + 5;

extern volatile __bit DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit DT @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit DTRXP @ (((unsigned) &BAUDCON)*8) + 5;

extern volatile __bit D_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_NOT_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit D_nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit EBDIS @ (((unsigned) &PR2)*8) + 7;

extern volatile __bit ECCPAS0 @ (((unsigned) &ECCP1AS)*8) + 4;

extern volatile __bit ECCPAS1 @ (((unsigned) &ECCP1AS)*8) + 5;

extern volatile __bit ECCPAS2 @ (((unsigned) &ECCP1AS)*8) + 6;

extern volatile __bit ECCPASE @ (((unsigned) &ECCP1AS)*8) + 7;

extern volatile __bit EEADR0 @ (((unsigned) &EEADR)*8) + 0;

extern volatile __bit EEADR1 @ (((unsigned) &EEADR)*8) + 1;

extern volatile __bit EEADR2 @ (((unsigned) &EEADR)*8) + 2;

extern volatile __bit EEADR3 @ (((unsigned) &EEADR)*8) + 3;

extern volatile __bit EEADR4 @ (((unsigned) &EEADR)*8) + 4;

extern volatile __bit EEADR5 @ (((unsigned) &EEADR)*8) + 5;

extern volatile __bit EEADR6 @ (((unsigned) &EEADR)*8) + 6;

extern volatile __bit EEADR7 @ (((unsigned) &EEADR)*8) + 7;

extern volatile __bit EEADR8 @ (((unsigned) &EEADRH)*8) + 0;

extern volatile __bit EEADR9 @ (((unsigned) &EEADRH)*8) + 1;

extern volatile __bit EEFS @ (((unsigned) &EECON1)*8) + 6;

extern volatile __bit EEIE @ (((unsigned) &PIE2)*8) + 4;

extern volatile __bit EEIF @ (((unsigned) &PIR2)*8) + 4;

extern volatile __bit EEIP @ (((unsigned) &IPR2)*8) + 4;

extern volatile __bit EEPGD @ (((unsigned) &EECON1)*8) + 7;

extern volatile __bit FERR @ (((unsigned) &RCSTA)*8) + 2;

extern volatile __bit FLT0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit FREE @ (((unsigned) &EECON1)*8) + 4;

extern volatile __bit FVREN @ (((unsigned) &CVRCON2)*8) + 7;

extern volatile __bit FVRST @ (((unsigned) &CVRCON2)*8) + 6;

extern volatile __bit GCEN @ (((unsigned) &SSPCON2)*8) + 7;

extern volatile __bit GIE @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit GIE_GIEH @ (((unsigned) &INTCON)*8) + 7;

extern volatile __bit GO @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GODONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit GO_nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit HLVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit HLVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit HLVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit HLVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit HLVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit HLVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit HLVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit HLVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit HLVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit IDLEN @ (((unsigned) &OSCCON)*8) + 7;

extern volatile __bit INT0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit INT0E @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0F @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT0IE @ (((unsigned) &INTCON)*8) + 4;

extern volatile __bit INT0IF @ (((unsigned) &INTCON)*8) + 1;

extern volatile __bit INT1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit INT1E @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1F @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IE @ (((unsigned) &INTCON3)*8) + 3;

extern volatile __bit INT1IF @ (((unsigned) &INTCON3)*8) + 0;

extern volatile __bit INT1IP @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT1P @ (((unsigned) &INTCON3)*8) + 6;

extern volatile __bit INT2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit INT2E @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2F @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IE @ (((unsigned) &INTCON3)*8) + 4;

extern volatile __bit INT2IF @ (((unsigned) &INTCON3)*8) + 1;

extern volatile __bit INT2IP @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INT2P @ (((unsigned) &INTCON3)*8) + 7;

extern volatile __bit INTEDG0 @ (((unsigned) &INTCON2)*8) + 6;

extern volatile __bit INTEDG1 @ (((unsigned) &INTCON2)*8) + 5;

extern volatile __bit INTEDG2 @ (((unsigned) &INTCON2)*8) + 4;

extern volatile __bit INTSRC @ (((unsigned) &OSCTUNE)*8) + 7;

extern volatile __bit IOCB4 @ (((unsigned) &IOCB)*8) + 4;

extern volatile __bit IOCB5 @ (((unsigned) &IOCB)*8) + 5;

extern volatile __bit IOCB6 @ (((unsigned) &IOCB)*8) + 6;

extern volatile __bit IOCB7 @ (((unsigned) &IOCB)*8) + 7;

extern volatile __bit IOFS @ (((unsigned) &OSCCON)*8) + 2;

extern volatile __bit IPEN @ (((unsigned) &RCON)*8) + 7;

extern volatile __bit IRCF0 @ (((unsigned) &OSCCON)*8) + 4;

extern volatile __bit IRCF1 @ (((unsigned) &OSCCON)*8) + 5;

extern volatile __bit IRCF2 @ (((unsigned) &OSCCON)*8) + 6;

extern volatile __bit IRVST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit IVRST @ (((unsigned) &HLVDCON)*8) + 5;

extern volatile __bit KBI0 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit KBI1 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit KBI2 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit KBI3 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit LA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LA7 @ (((unsigned) &LATA)*8) + 7;

extern volatile __bit LATA0 @ (((unsigned) &LATA)*8) + 0;

extern volatile __bit LATA1 @ (((unsigned) &LATA)*8) + 1;

extern volatile __bit LATA2 @ (((unsigned) &LATA)*8) + 2;

extern volatile __bit LATA3 @ (((unsigned) &LATA)*8) + 3;

extern volatile __bit LATA4 @ (((unsigned) &LATA)*8) + 4;

extern volatile __bit LATA5 @ (((unsigned) &LATA)*8) + 5;

extern volatile __bit LATA6 @ (((unsigned) &LATA)*8) + 6;

extern volatile __bit LATA7 @ (((unsigned) &LATA)*8) + 7;

extern volatile __bit LATB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LATB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LATB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LATB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LATB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LATB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LATB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LATB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LATC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LATC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LATC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LATC3 @ (((unsigned) &LATC)*8) + 3;

extern volatile __bit LATC4 @ (((unsigned) &LATC)*8) + 4;

extern volatile __bit LATC5 @ (((unsigned) &LATC)*8) + 5;

extern volatile __bit LATC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LATC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LB0 @ (((unsigned) &LATB)*8) + 0;

extern volatile __bit LB1 @ (((unsigned) &LATB)*8) + 1;

extern volatile __bit LB2 @ (((unsigned) &LATB)*8) + 2;

extern volatile __bit LB3 @ (((unsigned) &LATB)*8) + 3;

extern volatile __bit LB4 @ (((unsigned) &LATB)*8) + 4;

extern volatile __bit LB5 @ (((unsigned) &LATB)*8) + 5;

extern volatile __bit LB6 @ (((unsigned) &LATB)*8) + 6;

extern volatile __bit LB7 @ (((unsigned) &LATB)*8) + 7;

extern volatile __bit LC0 @ (((unsigned) &LATC)*8) + 0;

extern volatile __bit LC1 @ (((unsigned) &LATC)*8) + 1;

extern volatile __bit LC2 @ (((unsigned) &LATC)*8) + 2;

extern volatile __bit LC3 @ (((unsigned) &LATC)*8) + 3;

extern volatile __bit LC4 @ (((unsigned) &LATC)*8) + 4;

extern volatile __bit LC5 @ (((unsigned) &LATC)*8) + 5;

extern volatile __bit LC6 @ (((unsigned) &LATC)*8) + 6;

extern volatile __bit LC7 @ (((unsigned) &LATC)*8) + 7;

extern volatile __bit LVDEN @ (((unsigned) &HLVDCON)*8) + 4;

extern volatile __bit LVDIE @ (((unsigned) &PIE2)*8) + 2;

extern volatile __bit LVDIF @ (((unsigned) &PIR2)*8) + 2;

extern volatile __bit LVDIN @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit LVDIP @ (((unsigned) &IPR2)*8) + 2;

extern volatile __bit LVDL0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVDL1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVDL2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVDL3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit LVV0 @ (((unsigned) &HLVDCON)*8) + 0;

extern volatile __bit LVV1 @ (((unsigned) &HLVDCON)*8) + 1;

extern volatile __bit LVV2 @ (((unsigned) &HLVDCON)*8) + 2;

extern volatile __bit LVV3 @ (((unsigned) &HLVDCON)*8) + 3;

extern volatile __bit MC1OUT @ (((unsigned) &CM2CON1)*8) + 7;

extern volatile __bit MC2OUT @ (((unsigned) &CM2CON1)*8) + 6;

extern volatile __bit MCLR @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit MSK0 @ (((unsigned) &SSPMSK)*8) + 0;

extern volatile __bit MSK1 @ (((unsigned) &SSPMSK)*8) + 1;

extern volatile __bit MSK2 @ (((unsigned) &SSPMSK)*8) + 2;

extern volatile __bit MSK3 @ (((unsigned) &SSPMSK)*8) + 3;

extern volatile __bit MSK4 @ (((unsigned) &SSPMSK)*8) + 4;

extern volatile __bit MSK5 @ (((unsigned) &SSPMSK)*8) + 5;

extern volatile __bit MSK6 @ (((unsigned) &SSPMSK)*8) + 6;

extern volatile __bit MSK7 @ (((unsigned) &SSPMSK)*8) + 7;

extern volatile __bit NEGATIVE @ (((unsigned) &STATUS)*8) + 4;

extern volatile __bit NOT_A @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit NOT_ADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit NOT_BOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit NOT_DONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit NOT_MCLR @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit NOT_PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit NOT_POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit NOT_RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit NOT_RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit NOT_SS @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit NOT_T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit NOT_T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit NOT_TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit NOT_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit NOT_WRITE @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit OERR @ (((unsigned) &RCSTA)*8) + 1;

extern volatile __bit OSCFIE @ (((unsigned) &PIE2)*8) + 7;

extern volatile __bit OSCFIF @ (((unsigned) &PIR2)*8) + 7;

extern volatile __bit OSCFIP @ (((unsigned) &IPR2)*8) + 7;

extern volatile __bit OSTS @ (((unsigned) &OSCCON)*8) + 3;

extern volatile __bit OV @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit OVERFLOW @ (((unsigned) &STATUS)*8) + 3;

extern volatile __bit P1A @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit P1B @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit P1C @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit P1D @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit P1M0 @ (((unsigned) &CCP1CON)*8) + 6;

extern volatile __bit P1M1 @ (((unsigned) &CCP1CON)*8) + 7;

extern volatile __bit PA1 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit PA2 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit PA2E @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit PB1E @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit PB2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit PB3E @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit PC1E @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit PC2 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit PC3E @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit PD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit PD2 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit PDC0 @ (((unsigned) &PWM1CON)*8) + 0;

extern volatile __bit PDC1 @ (((unsigned) &PWM1CON)*8) + 1;

extern volatile __bit PDC2 @ (((unsigned) &PWM1CON)*8) + 2;

extern volatile __bit PDC3 @ (((unsigned) &PWM1CON)*8) + 3;

extern volatile __bit PDC4 @ (((unsigned) &PWM1CON)*8) + 4;

extern volatile __bit PDC5 @ (((unsigned) &PWM1CON)*8) + 5;

extern volatile __bit PDC6 @ (((unsigned) &PWM1CON)*8) + 6;

extern volatile __bit PEIE @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEIE_GIEL @ (((unsigned) &INTCON)*8) + 6;

extern volatile __bit PEN @ (((unsigned) &SSPCON2)*8) + 2;

extern volatile __bit PGC @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit PGD @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit PGM @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit PLLEN @ (((unsigned) &OSCTUNE)*8) + 6;

extern volatile __bit POR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit PRSEN @ (((unsigned) &PWM1CON)*8) + 7;

extern volatile __bit PSA @ (((unsigned) &T0CON)*8) + 3;

extern volatile __bit PSSAC0 @ (((unsigned) &ECCP1AS)*8) + 2;

extern volatile __bit PSSAC1 @ (((unsigned) &ECCP1AS)*8) + 3;

extern volatile __bit PSSBD0 @ (((unsigned) &ECCP1AS)*8) + 0;

extern volatile __bit PSSBD1 @ (((unsigned) &ECCP1AS)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA0 @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RA1 @ (((unsigned) &PORTA)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RA2 @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RA3 @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RA4 @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RA5 @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RA6 @ (((unsigned) &PORTA)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RA7 @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RB0 @ (((unsigned) &PORTB)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RB1 @ (((unsigned) &PORTB)*8) + 1;

extern volatile __bit __attribute__((__deprecated__)) RB2 @ (((unsigned) &PORTB)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RB3 @ (((unsigned) &PORTB)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RB4 @ (((unsigned) &PORTB)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RB5 @ (((unsigned) &PORTB)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RB6 @ (((unsigned) &PORTB)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RB7 @ (((unsigned) &PORTB)*8) + 7;

extern volatile __bit RBIE @ (((unsigned) &INTCON)*8) + 3;

extern volatile __bit RBIF @ (((unsigned) &INTCON)*8) + 0;

extern volatile __bit RBIP @ (((unsigned) &INTCON2)*8) + 0;

extern volatile __bit RBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit __attribute__((__deprecated__)) RC0 @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit __attribute__((__deprecated__)) RC1 @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit RC1IE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RC1IF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RC1IP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC2 @ (((unsigned) &PORTC)*8) + 2;

extern volatile __bit __attribute__((__deprecated__)) RC3 @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit __attribute__((__deprecated__)) RC4 @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit __attribute__((__deprecated__)) RC5 @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit __attribute__((__deprecated__)) RC6 @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit __attribute__((__deprecated__)) RC7 @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RC8_9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RC9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RCD8 @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RCEN @ (((unsigned) &SSPCON2)*8) + 3;

extern volatile __bit RCIDL @ (((unsigned) &BAUDCON)*8) + 6;

extern volatile __bit RCIE @ (((unsigned) &PIE1)*8) + 5;

extern volatile __bit RCIF @ (((unsigned) &PIR1)*8) + 5;

extern volatile __bit RCIP @ (((unsigned) &IPR1)*8) + 5;

extern volatile __bit RD @ (((unsigned) &EECON1)*8) + 0;

extern volatile __bit RD163 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit RDE @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE0 @ (((unsigned) &PORTE)*8) + 0;

extern volatile __bit RE1 @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit RE2 @ (((unsigned) &PORTE)*8) + 2;

extern volatile __bit RE3 @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit RE4 @ (((unsigned) &PORTE)*8) + 4;

extern volatile __bit RE5 @ (((unsigned) &PORTE)*8) + 5;

extern volatile __bit RE6 @ (((unsigned) &PORTE)*8) + 6;

extern volatile __bit RE7 @ (((unsigned) &PORTE)*8) + 7;

extern volatile __bit RI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit RJPU @ (((unsigned) &PORTA)*8) + 7;

extern volatile __bit RSEN @ (((unsigned) &SSPCON2)*8) + 1;

extern volatile __bit RW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit RX @ (((unsigned) &PORTC)*8) + 7;

extern volatile __bit RX9 @ (((unsigned) &RCSTA)*8) + 6;

extern volatile __bit RX9D @ (((unsigned) &RCSTA)*8) + 0;

extern volatile __bit RXCKP @ (((unsigned) &BAUDCON)*8) + 5;

extern volatile __bit R_NOT_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_W @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit R_nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit SBOREN @ (((unsigned) &RCON)*8) + 6;

extern volatile __bit SCK @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCKP @ (((unsigned) &BAUDCON)*8) + 4;

extern volatile __bit SCL @ (((unsigned) &PORTC)*8) + 3;

extern volatile __bit SCS0 @ (((unsigned) &OSCCON)*8) + 0;

extern volatile __bit SCS1 @ (((unsigned) &OSCCON)*8) + 1;

extern volatile __bit SDA @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDI @ (((unsigned) &PORTC)*8) + 4;

extern volatile __bit SDO @ (((unsigned) &PORTC)*8) + 5;

extern volatile __bit SEN @ (((unsigned) &SSPCON2)*8) + 0;

extern volatile __bit SENDB @ (((unsigned) &TXSTA)*8) + 3;

extern volatile __bit SENDB1 @ (((unsigned) &TXSTA)*8) + 3;

extern volatile __bit SLRA @ (((unsigned) &SLRCON)*8) + 0;

extern volatile __bit SLRB @ (((unsigned) &SLRCON)*8) + 1;

extern volatile __bit SLRC @ (((unsigned) &SLRCON)*8) + 2;

extern volatile __bit SMP @ (((unsigned) &SSPSTAT)*8) + 7;

extern volatile __bit SOSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit SOSCEN3 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit SP0 @ (((unsigned) &STKPTR)*8) + 0;

extern volatile __bit SP1 @ (((unsigned) &STKPTR)*8) + 1;

extern volatile __bit SP2 @ (((unsigned) &STKPTR)*8) + 2;

extern volatile __bit SP3 @ (((unsigned) &STKPTR)*8) + 3;

extern volatile __bit SP4 @ (((unsigned) &STKPTR)*8) + 4;

extern volatile __bit SPEN @ (((unsigned) &RCSTA)*8) + 7;

extern volatile __bit SREN @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SRENA @ (((unsigned) &RCSTA)*8) + 5;

extern volatile __bit SS @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit SSPEN @ (((unsigned) &SSPCON1)*8) + 5;

extern volatile __bit SSPIE @ (((unsigned) &PIE1)*8) + 3;

extern volatile __bit SSPIF @ (((unsigned) &PIR1)*8) + 3;

extern volatile __bit SSPIP @ (((unsigned) &IPR1)*8) + 3;

extern volatile __bit SSPM0 @ (((unsigned) &SSPCON1)*8) + 0;

extern volatile __bit SSPM1 @ (((unsigned) &SSPCON1)*8) + 1;

extern volatile __bit SSPM2 @ (((unsigned) &SSPCON1)*8) + 2;

extern volatile __bit SSPM3 @ (((unsigned) &SSPCON1)*8) + 3;

extern volatile __bit SSPOV @ (((unsigned) &SSPCON1)*8) + 6;

extern volatile __bit START @ (((unsigned) &SSPSTAT)*8) + 3;

extern volatile __bit STKFUL @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKOVF @ (((unsigned) &STKPTR)*8) + 7;

extern volatile __bit STKUNF @ (((unsigned) &STKPTR)*8) + 6;

extern volatile __bit STOP @ (((unsigned) &SSPSTAT)*8) + 4;

extern volatile __bit STRA @ (((unsigned) &PSTRCON)*8) + 0;

extern volatile __bit STRB @ (((unsigned) &PSTRCON)*8) + 1;

extern volatile __bit STRC @ (((unsigned) &PSTRCON)*8) + 2;

extern volatile __bit STRD @ (((unsigned) &PSTRCON)*8) + 3;

extern volatile __bit STRSYNC @ (((unsigned) &PSTRCON)*8) + 4;

extern volatile __bit SWDTE @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SWDTEN @ (((unsigned) &WDTCON)*8) + 0;

extern volatile __bit SYNC @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit SYNC1 @ (((unsigned) &TXSTA)*8) + 4;

extern volatile __bit T08BIT @ (((unsigned) &T0CON)*8) + 6;

extern volatile __bit T0CKI @ (((unsigned) &PORTA)*8) + 4;

extern volatile __bit T0CS @ (((unsigned) &T0CON)*8) + 5;

extern volatile __bit T0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit T0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit T0PS0 @ (((unsigned) &T0CON)*8) + 0;

extern volatile __bit T0PS1 @ (((unsigned) &T0CON)*8) + 1;

extern volatile __bit T0PS2 @ (((unsigned) &T0CON)*8) + 2;

extern volatile __bit T0SE @ (((unsigned) &T0CON)*8) + 4;

extern volatile __bit T13CKI @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1CKI @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1CKPS0 @ (((unsigned) &T1CON)*8) + 4;

extern volatile __bit T1CKPS1 @ (((unsigned) &T1CON)*8) + 5;

extern volatile __bit T1OSCEN @ (((unsigned) &T1CON)*8) + 3;

extern volatile __bit T1OSI @ (((unsigned) &PORTC)*8) + 1;

extern volatile __bit T1OSO @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T1RD16 @ (((unsigned) &T1CON)*8) + 7;

extern volatile __bit T1RUN @ (((unsigned) &T1CON)*8) + 6;

extern volatile __bit T1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit T2CKPS0 @ (((unsigned) &T2CON)*8) + 0;

extern volatile __bit T2CKPS1 @ (((unsigned) &T2CON)*8) + 1;

extern volatile __bit T2OUTPS0 @ (((unsigned) &T2CON)*8) + 3;

extern volatile __bit T2OUTPS1 @ (((unsigned) &T2CON)*8) + 4;

extern volatile __bit T2OUTPS2 @ (((unsigned) &T2CON)*8) + 5;

extern volatile __bit T2OUTPS3 @ (((unsigned) &T2CON)*8) + 6;

extern volatile __bit T3CCP1 @ (((unsigned) &T3CON)*8) + 3;

extern volatile __bit T3CCP2 @ (((unsigned) &T3CON)*8) + 6;

extern volatile __bit T3CKI @ (((unsigned) &PORTC)*8) + 0;

extern volatile __bit T3CKPS0 @ (((unsigned) &T3CON)*8) + 4;

extern volatile __bit T3CKPS1 @ (((unsigned) &T3CON)*8) + 5;

extern volatile __bit T3RD16 @ (((unsigned) &T3CON)*8) + 7;

extern volatile __bit T3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit TMR0IE @ (((unsigned) &INTCON)*8) + 5;

extern volatile __bit TMR0IF @ (((unsigned) &INTCON)*8) + 2;

extern volatile __bit TMR0IP @ (((unsigned) &INTCON2)*8) + 2;

extern volatile __bit TMR0ON @ (((unsigned) &T0CON)*8) + 7;

extern volatile __bit TMR1CS @ (((unsigned) &T1CON)*8) + 1;

extern volatile __bit TMR1IE @ (((unsigned) &PIE1)*8) + 0;

extern volatile __bit TMR1IF @ (((unsigned) &PIR1)*8) + 0;

extern volatile __bit TMR1IP @ (((unsigned) &IPR1)*8) + 0;

extern volatile __bit TMR1ON @ (((unsigned) &T1CON)*8) + 0;

extern volatile __bit TMR2IE @ (((unsigned) &PIE1)*8) + 1;

extern volatile __bit TMR2IF @ (((unsigned) &PIR1)*8) + 1;

extern volatile __bit TMR2IP @ (((unsigned) &IPR1)*8) + 1;

extern volatile __bit TMR2ON @ (((unsigned) &T2CON)*8) + 2;

extern volatile __bit TMR3CS @ (((unsigned) &T3CON)*8) + 1;

extern volatile __bit TMR3IE @ (((unsigned) &PIE2)*8) + 1;

extern volatile __bit TMR3IF @ (((unsigned) &PIR2)*8) + 1;

extern volatile __bit TMR3IP @ (((unsigned) &IPR2)*8) + 1;

extern volatile __bit TMR3ON @ (((unsigned) &T3CON)*8) + 0;

extern volatile __bit TO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit TRISA0 @ (((unsigned) &TRISA)*8) + 0;

extern volatile __bit TRISA1 @ (((unsigned) &TRISA)*8) + 1;

extern volatile __bit TRISA2 @ (((unsigned) &TRISA)*8) + 2;

extern volatile __bit TRISA3 @ (((unsigned) &TRISA)*8) + 3;

extern volatile __bit TRISA4 @ (((unsigned) &TRISA)*8) + 4;

extern volatile __bit TRISA5 @ (((unsigned) &TRISA)*8) + 5;

extern volatile __bit TRISA6 @ (((unsigned) &TRISA)*8) + 6;

extern volatile __bit TRISA7 @ (((unsigned) &TRISA)*8) + 7;

extern volatile __bit TRISB0 @ (((unsigned) &TRISB)*8) + 0;

extern volatile __bit TRISB1 @ (((unsigned) &TRISB)*8) + 1;

extern volatile __bit TRISB2 @ (((unsigned) &TRISB)*8) + 2;

extern volatile __bit TRISB3 @ (((unsigned) &TRISB)*8) + 3;

extern volatile __bit TRISB4 @ (((unsigned) &TRISB)*8) + 4;

extern volatile __bit TRISB5 @ (((unsigned) &TRISB)*8) + 5;

extern volatile __bit TRISB6 @ (((unsigned) &TRISB)*8) + 6;

extern volatile __bit TRISB7 @ (((unsigned) &TRISB)*8) + 7;

extern volatile __bit TRISC0 @ (((unsigned) &TRISC)*8) + 0;

extern volatile __bit TRISC1 @ (((unsigned) &TRISC)*8) + 1;

extern volatile __bit TRISC2 @ (((unsigned) &TRISC)*8) + 2;

extern volatile __bit TRISC3 @ (((unsigned) &TRISC)*8) + 3;

extern volatile __bit TRISC4 @ (((unsigned) &TRISC)*8) + 4;

extern volatile __bit TRISC5 @ (((unsigned) &TRISC)*8) + 5;

extern volatile __bit TRISC6 @ (((unsigned) &TRISC)*8) + 6;

extern volatile __bit TRISC7 @ (((unsigned) &TRISC)*8) + 7;

extern volatile __bit TRMT @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TRMT1 @ (((unsigned) &TXSTA)*8) + 1;

extern volatile __bit TUN0 @ (((unsigned) &OSCTUNE)*8) + 0;

extern volatile __bit TUN1 @ (((unsigned) &OSCTUNE)*8) + 1;

extern volatile __bit TUN2 @ (((unsigned) &OSCTUNE)*8) + 2;

extern volatile __bit TUN3 @ (((unsigned) &OSCTUNE)*8) + 3;

extern volatile __bit TUN4 @ (((unsigned) &OSCTUNE)*8) + 4;

extern volatile __bit TUN5 @ (((unsigned) &OSCTUNE)*8) + 5;

extern volatile __bit TX @ (((unsigned) &PORTC)*8) + 6;

extern volatile __bit TX1IE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TX1IF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TX1IP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit TX8_9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX91 @ (((unsigned) &TXSTA)*8) + 6;

extern volatile __bit TX9D @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TX9D1 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXD8 @ (((unsigned) &TXSTA)*8) + 0;

extern volatile __bit TXEN @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXEN1 @ (((unsigned) &TXSTA)*8) + 5;

extern volatile __bit TXIE @ (((unsigned) &PIE1)*8) + 4;

extern volatile __bit TXIF @ (((unsigned) &PIR1)*8) + 4;

extern volatile __bit TXIP @ (((unsigned) &IPR1)*8) + 4;

extern volatile __bit UA @ (((unsigned) &SSPSTAT)*8) + 1;

extern volatile __bit ULPWUIN @ (((unsigned) &PORTA)*8) + 0;

extern volatile __bit VCFG0 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG01 @ (((unsigned) &ADCON1)*8) + 4;

extern volatile __bit VCFG1 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VCFG11 @ (((unsigned) &ADCON1)*8) + 5;

extern volatile __bit VDIRMAG @ (((unsigned) &HLVDCON)*8) + 7;

extern volatile __bit VPP @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit VREFM @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit VREFN @ (((unsigned) &PORTA)*8) + 2;

extern volatile __bit VREFP @ (((unsigned) &PORTA)*8) + 3;

extern volatile __bit W4E @ (((unsigned) &BAUDCON)*8) + 1;

extern volatile __bit WAIT0 @ (((unsigned) &PR2)*8) + 4;

extern volatile __bit WAIT1 @ (((unsigned) &PR2)*8) + 5;

extern volatile __bit WCOL @ (((unsigned) &SSPCON1)*8) + 7;

extern volatile __bit WM0 @ (((unsigned) &PR2)*8) + 0;

extern volatile __bit WM1 @ (((unsigned) &PR2)*8) + 1;

extern volatile __bit WPUB0 @ (((unsigned) &WPUB)*8) + 0;

extern volatile __bit WPUB1 @ (((unsigned) &WPUB)*8) + 1;

extern volatile __bit WPUB2 @ (((unsigned) &WPUB)*8) + 2;

extern volatile __bit WPUB3 @ (((unsigned) &WPUB)*8) + 3;

extern volatile __bit WPUB4 @ (((unsigned) &WPUB)*8) + 4;

extern volatile __bit WPUB5 @ (((unsigned) &WPUB)*8) + 5;

extern volatile __bit WPUB6 @ (((unsigned) &WPUB)*8) + 6;

extern volatile __bit WPUB7 @ (((unsigned) &WPUB)*8) + 7;

extern volatile __bit WR @ (((unsigned) &EECON1)*8) + 1;

extern volatile __bit WRE @ (((unsigned) &PORTE)*8) + 1;

extern volatile __bit WREN @ (((unsigned) &EECON1)*8) + 2;

extern volatile __bit WRERR @ (((unsigned) &EECON1)*8) + 3;

extern volatile __bit WUE @ (((unsigned) &BAUDCON)*8) + 1;

extern volatile __bit ZERO @ (((unsigned) &STATUS)*8) + 2;

extern volatile __bit nA @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nADDRESS @ (((unsigned) &SSPSTAT)*8) + 5;

extern volatile __bit nBOR @ (((unsigned) &RCON)*8) + 0;

extern volatile __bit nDONE @ (((unsigned) &ADCON0)*8) + 1;

extern volatile __bit nMCLR @ (((unsigned) &PORTE)*8) + 3;

extern volatile __bit nPD @ (((unsigned) &RCON)*8) + 2;

extern volatile __bit nPOR @ (((unsigned) &RCON)*8) + 1;

extern volatile __bit nRBPU @ (((unsigned) &INTCON2)*8) + 7;

extern volatile __bit nRI @ (((unsigned) &RCON)*8) + 4;

extern volatile __bit nSS @ (((unsigned) &PORTA)*8) + 5;

extern volatile __bit nT1SYNC @ (((unsigned) &T1CON)*8) + 2;

extern volatile __bit nT3SYNC @ (((unsigned) &T3CON)*8) + 2;

extern volatile __bit nTO @ (((unsigned) &RCON)*8) + 3;

extern volatile __bit nW @ (((unsigned) &SSPSTAT)*8) + 2;

extern volatile __bit nWRITE @ (((unsigned) &SSPSTAT)*8) + 2;

# 2008 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\adc.h"
union ADCResult
{
int lr;
char br[2];
};

char BusyADC (void);

void ConvertADC (void);

void CloseADC(void);

# 2026
int ReadADC(void);

# 2046
void OpenADC ( unsigned char ,
unsigned char ,
unsigned int );

# 2084
void SetChanADC(unsigned char );

# 2100
void SelChanConvADC( unsigned char );

# 90 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\ancomp.h"
void Close_ancomp1( void );
void Open_ancomp1(unsigned char config);
void Close_ancomp2( void );
void Open_ancomp2(unsigned char config);

# 584 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\spi.h"
void OpenSPI( unsigned char sync_mode,
unsigned char bus_mode,
unsigned char smp_phase );

signed char WriteSPI( unsigned char data_out );

void getsSPI( unsigned char *rdptr, unsigned char length );

void putsSPI( unsigned char *wrptr );

unsigned char ReadSPI( void );

# 414 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\can2510.h"
void CAN2510Initialize(  unsigned int configuration,
 unsigned char brp,
 unsigned char interruptFlags,
 unsigned char SPI_syncMode,
 unsigned char SPI_busMode,
 unsigned char SPI_smpPhase );

signed char CAN2510Init(  unsigned long BufferConfig,
 unsigned long BitTimeConfig,
 unsigned char interruptEnables,
 unsigned char SPI_syncMode,
 unsigned char SPI_busMode,
 unsigned char SPI_smpPhase );

void CAN2510Enable( void );

void CAN2510Disable( void );

void CAN2510Reset( void );

void CAN2510SetMode(  unsigned char mode );

unsigned char CAN2510ReadMode( void );

unsigned char CAN2510ReadStatus( void );

unsigned char CAN2510ErrorState( void );

unsigned char CAN2510InterruptStatus( void );

void CAN2510InterruptEnable( unsigned char interruptFlags );

unsigned char CAN2510ByteRead(  unsigned char addr );

void CAN2510ByteWrite(  unsigned char addr,  unsigned char value );

void CAN2510SequentialRead(  unsigned char *DataArray,
 unsigned char CAN2510addr,
 unsigned char numbytes );

void CAN2510SequentialWrite(  unsigned char *DataArray,
 unsigned char CAN2510addr,
 unsigned char numbytes );

void CAN2510BitModify(  unsigned char address,
 unsigned char mask,
 unsigned char data );

void CAN2510SetSingleMaskStd(  unsigned char maskNum,  unsigned int mask );

void CAN2510SetSingleMaskXtd(  unsigned char maskNum,  unsigned long mask );

void CAN2510SetSingleFilterStd(  unsigned char filterNum,  unsigned int filter );

void CAN2510SetSingleFilterXtd(  unsigned char filterNum,  unsigned long filter );

signed char CAN2510SetMsgFilterStd(  unsigned char bufferNum,
 unsigned int mask,
 unsigned int *filters );

signed char CAN2510SetMsgFilterXtd(  unsigned char bufferNum,
 unsigned long mask,
 unsigned long *filters );

signed char CAN2510WriteStd(  unsigned int msgId,
 unsigned char msgPriority,
 unsigned char numBytes,
 unsigned char *data );

signed char CAN2510WriteXtd(  unsigned long msgId,
 unsigned char msgPriority,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadBufferStd(  unsigned char bufferNum,
 unsigned int msgId,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadBufferXtd(  unsigned char bufferNum,
 unsigned long msgId,
 unsigned char numBytes,
 unsigned char *data );

void CAN2510LoadRTRStd(  unsigned char bufferNum,
 unsigned int msgId,
 unsigned char numBytes );

void CAN2510LoadRTRXtd(  unsigned char bufferNum,
 unsigned long msgId,
 unsigned char numBytes );

void CAN2510SetBufferPriority(  unsigned char bufferNum,
 unsigned char bufferPriority );

void CAN2510SendBuffer(  unsigned char bufferNumber );

signed char CAN2510WriteBuffer(  unsigned char bufferNum );

unsigned char CAN2510DataReady(  unsigned char bufferNum );

unsigned char CAN2510DataRead(  unsigned char bufferNum,
 unsigned long *msgId,
 unsigned char *numBytes,
 unsigned char *data );

# 64 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\capture.h"
union capstatus
{

# 73
struct
{

# 77
unsigned Cap1OVF:1;

# 82
unsigned Cap2OVF:1;

# 107
unsigned ECap1OVF:1;

# 115
};

unsigned :8;

};

extern union capstatus CapStatus;

union CapResult
{
unsigned int lc;
char bc[2];
};

# 474
void OpenCapture1 ( unsigned char config);
unsigned int ReadCapture1 (void);
void CloseCapture1 (void);

# 484
void OpenCapture2 ( unsigned char config);
unsigned int ReadCapture2 (void);
void CloseCapture2 (void);

# 568
void OpenECapture1 ( unsigned char config);
unsigned int ReadECapture1 (void);
void CloseECapture1 (void);

# 385 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\compare.h"
void OpenCompare1(unsigned char config,unsigned int period);
void CloseCompare1(void);

# 392
void OpenCompare2(unsigned char config, unsigned int period);
void CloseCompare2(void);

# 433
void OpenECompare1(unsigned char config,unsigned int period);
void CloseECompare1(void);

# 36 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\EEP.h"
void Busy_eep ( void );
unsigned char Read_b_eep( unsigned int badd );
void Write_b_eep( unsigned int badd, unsigned char bdat );

# 2 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stddef.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 13
extern int errno;

# 65 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\GenericTypeDefs.h"
typedef enum _BOOL { FALSE = 0, TRUE } BOOL;


typedef enum _BIT { CLEAR = 0, SET } BIT;

# 75
typedef signed int INT;
typedef signed char INT8;
typedef signed short int INT16;
typedef signed long int INT32;



 typedef signed long long INT64;



typedef unsigned int UINT;
typedef unsigned char UINT8;
typedef unsigned short int UINT16;

# 93
typedef unsigned long int UINT32;


 typedef unsigned long long UINT64;


typedef union
{
UINT8 Val;
struct
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
} bits;
} UINT8_VAL, UINT8_BITS;

typedef union
{
UINT16 Val;
UINT8 v[2] ;
struct 
{
UINT8 LB;
UINT8 HB;
} byte;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
} bits;
} UINT16_VAL, UINT16_BITS;

# 187
typedef union
{
UINT32 Val;
UINT16 w[2] ;
UINT8 v[4] ;
struct 
{
UINT16 LW;
UINT16 HW;
} word;
struct 
{
UINT8 LB;
UINT8 HB;
UINT8 UB;
UINT8 MB;
} byte;
struct 
{
UINT16_VAL low;
UINT16_VAL high;
}wordUnion;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
} bits;
} UINT32_VAL;



typedef union
{
UINT64 Val;
UINT32 d[2] ;
UINT16 w[4] ;
UINT8 v[8] ;
struct 
{
UINT32 LD;
UINT32 HD;
} dword;
struct 
{
UINT16 LW;
UINT16 HW;
UINT16 UW;
UINT16 MW;
} word;
struct 
{
 UINT8 b0:1;
 UINT8 b1:1;
 UINT8 b2:1;
 UINT8 b3:1;
 UINT8 b4:1;
 UINT8 b5:1;
 UINT8 b6:1;
 UINT8 b7:1;
 UINT8 b8:1;
 UINT8 b9:1;
 UINT8 b10:1;
 UINT8 b11:1;
 UINT8 b12:1;
 UINT8 b13:1;
 UINT8 b14:1;
 UINT8 b15:1;
 UINT8 b16:1;
 UINT8 b17:1;
 UINT8 b18:1;
 UINT8 b19:1;
 UINT8 b20:1;
 UINT8 b21:1;
 UINT8 b22:1;
 UINT8 b23:1;
 UINT8 b24:1;
 UINT8 b25:1;
 UINT8 b26:1;
 UINT8 b27:1;
 UINT8 b28:1;
 UINT8 b29:1;
 UINT8 b30:1;
 UINT8 b31:1;
 UINT8 b32:1;
 UINT8 b33:1;
 UINT8 b34:1;
 UINT8 b35:1;
 UINT8 b36:1;
 UINT8 b37:1;
 UINT8 b38:1;
 UINT8 b39:1;
 UINT8 b40:1;
 UINT8 b41:1;
 UINT8 b42:1;
 UINT8 b43:1;
 UINT8 b44:1;
 UINT8 b45:1;
 UINT8 b46:1;
 UINT8 b47:1;
 UINT8 b48:1;
 UINT8 b49:1;
 UINT8 b50:1;
 UINT8 b51:1;
 UINT8 b52:1;
 UINT8 b53:1;
 UINT8 b54:1;
 UINT8 b55:1;
 UINT8 b56:1;
 UINT8 b57:1;
 UINT8 b58:1;
 UINT8 b59:1;
 UINT8 b60:1;
 UINT8 b61:1;
 UINT8 b62:1;
 UINT8 b63:1;
} bits;
} UINT64_VAL;

# 339
typedef void VOID;

typedef char CHAR8;
typedef unsigned char UCHAR8;

typedef unsigned char BYTE;
typedef unsigned short int WORD;
typedef unsigned long DWORD;


typedef unsigned long long QWORD;
typedef signed char CHAR;
typedef signed short int SHORT;
typedef signed long LONG;


typedef signed long long LONGLONG;
typedef union
{
BYTE Val;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
} bits;
} BYTE_VAL, BYTE_BITS;

typedef union
{
WORD Val;
BYTE v[2] ;
struct 
{
BYTE LB;
BYTE HB;
} byte;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
} bits;
} WORD_VAL, WORD_BITS;

typedef union
{
DWORD Val;
WORD w[2] ;
BYTE v[4] ;
struct 
{
WORD LW;
WORD HW;
} word;
struct 
{
BYTE LB;
BYTE HB;
BYTE UB;
BYTE MB;
} byte;
struct 
{
WORD_VAL low;
WORD_VAL high;
}wordUnion;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
} bits;
} DWORD_VAL;


typedef union
{
QWORD Val;
DWORD d[2] ;
WORD w[4] ;
BYTE v[8] ;
struct 
{
DWORD LD;
DWORD HD;
} dword;
struct 
{
WORD LW;
WORD HW;
WORD UW;
WORD MW;
} word;
struct 
{
 BYTE b0:1;
 BYTE b1:1;
 BYTE b2:1;
 BYTE b3:1;
 BYTE b4:1;
 BYTE b5:1;
 BYTE b6:1;
 BYTE b7:1;
 BYTE b8:1;
 BYTE b9:1;
 BYTE b10:1;
 BYTE b11:1;
 BYTE b12:1;
 BYTE b13:1;
 BYTE b14:1;
 BYTE b15:1;
 BYTE b16:1;
 BYTE b17:1;
 BYTE b18:1;
 BYTE b19:1;
 BYTE b20:1;
 BYTE b21:1;
 BYTE b22:1;
 BYTE b23:1;
 BYTE b24:1;
 BYTE b25:1;
 BYTE b26:1;
 BYTE b27:1;
 BYTE b28:1;
 BYTE b29:1;
 BYTE b30:1;
 BYTE b31:1;
 BYTE b32:1;
 BYTE b33:1;
 BYTE b34:1;
 BYTE b35:1;
 BYTE b36:1;
 BYTE b37:1;
 BYTE b38:1;
 BYTE b39:1;
 BYTE b40:1;
 BYTE b41:1;
 BYTE b42:1;
 BYTE b43:1;
 BYTE b44:1;
 BYTE b45:1;
 BYTE b46:1;
 BYTE b47:1;
 BYTE b48:1;
 BYTE b49:1;
 BYTE b50:1;
 BYTE b51:1;
 BYTE b52:1;
 BYTE b53:1;
 BYTE b54:1;
 BYTE b55:1;
 BYTE b56:1;
 BYTE b57:1;
 BYTE b58:1;
 BYTE b59:1;
 BYTE b60:1;
 BYTE b61:1;
 BYTE b62:1;
 BYTE b63:1;
} bits;
} QWORD_VAL;

# 113 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\flash.h"
extern void ReadFlash(unsigned long startaddr, unsigned int num_bytes, unsigned char *flash_array);

# 120
extern void EraseFlash(unsigned long startaddr, unsigned long endaddr);

extern void WriteBlockFlash(unsigned long startaddr, unsigned char num_blocks, unsigned char *flash_array);

extern void WriteBytesFlash(unsigned long startaddr, unsigned int num_bytes, unsigned char *flash_array);

# 775 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\i2c.h"
void IdleI2C( void );

void OpenI2C( unsigned char sync_mode, unsigned char slew );

signed char WriteI2C( unsigned char data_out );

signed char putsI2C( unsigned char *wrptr );

unsigned char ReadI2C( void );

void CloseI2C( void );

# 899
signed char WriteI2C( unsigned char data_out );

signed char getsI2C( unsigned char *rdptr, unsigned char length );

# 908
signed char EEAckPolling( unsigned char control );

signed char EEByteWrite( unsigned char control,
unsigned char address,
unsigned char data );

signed int EECurrentAddRead( unsigned char control );

signed char EEPageWrite( unsigned char control,
unsigned char address,
unsigned char *wrptr );

signed int EERandomRead( unsigned char control, unsigned char address );

signed char EESequentialRead( unsigned char control,
unsigned char address,
unsigned char *rdptr,
unsigned char length );

# 325 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\mwire.h"
void OpenMwire( unsigned char sync_mode );

unsigned char ReadMwire( unsigned char high_byte,
unsigned char low_byte );

# 341
signed char WriteMwire( unsigned char data_out );

# 354
void getsMwire( unsigned char *rdptr, unsigned char length );

# 126 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\portb.h"
void OpenPORTB( unsigned char config);

# 176
void OpenRB0INT( unsigned char config);

# 194
void OpenRB1INT( unsigned char config);

# 211
void OpenRB2INT( unsigned char config);

# 85 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\pwm.h"
union PWMDC
{
unsigned int lpwm;
char bpwm[2];
};

# 467
void OpenPWM1 ( char period);
void SetDCPWM1 ( unsigned int duty_cycle);

# 474
void SetOutputPWM1 ( unsigned char output_config,
unsigned char pwm_mode);

void ClosePWM1 (void);

# 485
void OpenPWM2 ( char period);
void SetDCPWM2( unsigned int duty_cycle);

# 492
void ClosePWM2 (void);

# 16 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\reset.h"
char isMCLR(void);
void StatusReset(void);
char isPOR(void);
char isWU(void);


char isBOR(void);



char isWDTTO(void);
char isWDTWU(void);



char isLVD(void);

# 687 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\rtcc.h"
void Open_RTCC(void);
void Close_RTCC(void);
unsigned char update_RTCC(void);

# 97 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\sw_i2c.h"
void SWStopI2C ( void );
void SWStartI2C ( void );
void SWRestartI2C ( void );
void SWStopI2C ( void );

signed char SWAckI2C( void );
signed char Clock_test( void );
signed int SWReadI2C( void );
signed char SWWriteI2C(  unsigned char data_out );
signed char SWGetsI2C(  unsigned char *rdptr,  unsigned char length );
signed char SWPutsI2C(  unsigned char *wrptr );

# 84 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\sw_spi.h"
void OpenSWSPI(void);


char WriteSWSPI( char output);


void SetCSSWSPI(void);


void ClearCSSWSPI(void);

# 47 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\sw_uart.h"
void OpenUART(void);

unsigned char ReadUART(void);

void WriteUART( unsigned char);

void getsUART( char *, unsigned char);

void putsUART( char *);

# 79
extern void DelayRXBitUART (void);
extern void DelayRXHalfBitUART(void);
extern void DelayTXBitUART (void);

# 36 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\timers.h"
union Timers
{
unsigned int lt;
char bt[2];
};

# 118
void OpenTimer0 ( unsigned char config);
void CloseTimer0 (void);
unsigned int ReadTimer0 (void);
void WriteTimer0 ( unsigned int timer0);

# 236
void OpenTimer1 ( unsigned char config);
void CloseTimer1 (void);
unsigned int ReadTimer1 (void);
void WriteTimer1 ( unsigned int timer1);

# 325
void OpenTimer2 ( unsigned char config);
void CloseTimer2 (void);

# 391
void OpenTimer3 ( unsigned char config);
void CloseTimer3 (void);
unsigned int ReadTimer3 (void);
void WriteTimer3 ( unsigned int timer3);

# 1179
void SetTmrCCPSrc( unsigned char );

# 568 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\usart.h"
union USART
{
unsigned char val;
struct
{
unsigned RX_NINE:1;
unsigned TX_NINE:1;
unsigned FRAME_ERROR:1;
unsigned OVERRUN_ERROR:1;
unsigned fill:4;
};
};
extern union USART USART_Status;
void OpenUSART ( unsigned char config, unsigned spbrg);

# 596
char ReadUSART (void);
void WriteUSART ( char data);
void getsUSART ( char *buffer, unsigned char len);
void putsUSART ( char *data);
void putrsUSART ( const  char *data);

# 654
void baudUSART ( unsigned char baudconfig);

# 87 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\xlcd.h"
void OpenXLCD( unsigned char);

# 92
void SetCGRamAddr( unsigned char);

# 97
void SetDDRamAddr( unsigned char);

# 102
unsigned char BusyXLCD(void);

# 107
unsigned char ReadAddrXLCD(void);

# 112
char ReadDataXLCD(void);

# 117
void WriteCmdXLCD( unsigned char);

# 122
void WriteDataXLCD( char);

# 132
void putsXLCD( char *);

# 137
void putrsXLCD(const char *);


extern void DelayFor18TCY(void);
extern void DelayPORXLCD(void);
extern void DelayXLCD(void);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\plib\delays.h"
void Delay1TCYx(unsigned char);

# 19
void Delay10TCYx(unsigned char);

# 25
void Delay100TCYx(unsigned char);

# 31
void Delay1KTCYx(unsigned char);

# 37
void Delay10KTCYx(unsigned char);

# 18 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\pic18.h"
__attribute__((__unsupported__("The flash_write routine is no longer supported. Please use the peripheral library functions: WriteBytesFlash, WriteBlockFlash or WriteWordFlash"))) void flash_write(const unsigned char *, unsigned int, __far unsigned char *);


# 41
#pragma intrinsic(__nop)
extern void __nop(void);


# 160
#pragma intrinsic(_delay)
extern __nonreentrant void _delay(unsigned long);
#pragma intrinsic(_delaywdt)
extern __nonreentrant void _delaywdt(unsigned long);
#pragma intrinsic(_delay3)
extern __nonreentrant void _delay3(unsigned char);

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdbool.h"
typedef unsigned char bool;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 24 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int errno;

# 55
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 100 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 192
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 55 "user.h"
unsigned char ProductName[50] = {"Home Automation"};

# 84
const unsigned char FirmVersion[] = {"1.0_DW0f"};

# 89
const unsigned char PCBVersion[] = {"RevB"};




const unsigned char Frequency[] = {"315MHz and 433MHz"};

const unsigned char ProjectName[] = {"Home Automation IR/RF Hub"};

# 307
void InitApp(void);
void Init_System (void);

# 67 "Bluetooth.h"
extern unsigned char BluetoothChangeStatus;
extern unsigned char BluetoothFirmware1[30];
extern unsigned char BluetoothFirmware2[30];
extern unsigned char BluetoothBroadcast[21];




void InitBluetooth(void);
unsigned char BlueConnected(void);
void ResetBlue(void);
unsigned char EnterCommandMode(void);
unsigned char BluetoothInitialSetup(unsigned char Default);
unsigned char BluetoothConfigured(void);
unsigned char UseBluetooth(unsigned char *String, unsigned char StringPos);
unsigned char WaitForIRsignal(void);

# 56 "system.h"
void ConfigureOscillator(void);

# 202 "RF.h"
const unsigned char Conf1_Channels[] = "DEF";


const unsigned char Conf1_ChannelD[] = {3,3,3,3,3,3,0,0,1,0,0,0};
const unsigned char Conf1_ChannelD_STR[] = "Conf1_ChannelD";


const unsigned char Conf1_ChannelE[] = {0,3,3,3,3,3,0,0,1,0,0,0};
const unsigned char Conf1_ChannelE_STR[] = "Conf1_ChannelE";


const unsigned char Conf1_ChannelF[] = {3,0,3,3,3,3,0,0,1,0,0,0};
const unsigned char Conf1_ChannelF_STR[] = "Conf1_ChannelF";

# 228
const unsigned char Conf2_Channels[] = "BDH";

const unsigned char Conf2_ChannelB_STR[] = "Conf2_ChannelB";
const unsigned char Conf2_ChannelB_ON[] = {0,1,1,0,1,0,0,0,0,0,1,0,0,1,0,0};
const unsigned char Conf2_ChannelB_ON_STR[] = "Conf2_ChannelB_ON";
const unsigned char Conf2_ChannelB_OFF[] = {0,1,1,0,1,0,0,0,0,0,0,1,0,1,0,0};
const unsigned char Conf2_ChannelB_OFF_STR[] = "Conf2_ChannelB_OFF";


const unsigned char Conf2_ChannelD_STR[] = "Conf2_ChannelD";
const unsigned char Conf2_ChannelD_ON[] = {0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,1};
const unsigned char Conf2_ChannelD_ON_STR[] = "Conf2_ChannelD_ON";
const unsigned char Conf2_ChannelD_OFF[] = {0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,1};
const unsigned char Conf2_ChannelD_OFF_STR[] = "Conf2_ChannelD_OFF";


const unsigned char Conf2_ChannelH_1_STR[] = "Conf2_ChannelH_1";
const unsigned char Conf2_ChannelH_1_ON[] = {0,1,1,0,1,0,0,0,1,0,0,0,0,0,0,0};
const unsigned char Conf2_ChannelH_1_ON_STR[] = "Conf2_ChannelH_1_ON";
const unsigned char Conf2_ChannelH_1_OFF[] = {0,1,1,0,1,0,0,0,0,1,0,0,0,0,0,0};
const unsigned char Conf2_ChannelH_1_OFF_STR[] = "Conf2_ChannelH_1_OFF";

const unsigned char Conf2_ChannelH_2_STR[] = "Conf2_ChannelH_2";
const unsigned char Conf2_ChannelH_2_ON[] = {0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0};
const unsigned char Conf2_ChannelH_2_ON_STR[] = "Conf2_ChannelH_2_ON";
const unsigned char Conf2_ChannelH_2_OFF[] = {0,1,1,0,1,0,0,0,0,0,0,1,0,0,0,0};
const unsigned char Conf2_ChannelH_2_OFF_STR[] = "Conf2_ChannelH_2_OFF";

const unsigned char Conf2_ChannelH_3_STR[] = "Conf2_ChannelH_3";
const unsigned char Conf2_ChannelH_3_ON[] = {0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0};
const unsigned char Conf2_ChannelH_3_ON_STR[] = "Conf2_ChannelH_3_ON";
const unsigned char Conf2_ChannelH_3_OFF[] = {0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0};
const unsigned char Conf2_ChannelH_3_OFF_STR[] = "Conf2_ChannelH_3_OFF";

# 278
const unsigned char Conf3_Channels[] = "0123456789abcdef";
const unsigned char Conf3_Buttons[] = "12345";

const unsigned char Conf3[16][5][2][12] =
{
{


{ {3,3,3,3,3,3,3,3,0,1,0,1},{3,3,3,3,3,3,3,3,0,1,1,0} },
{ {3,3,3,3,3,3,3,3,1,0,0,1},{3,3,3,3,3,3,3,3,1,0,1,0} },
{ {3,3,3,3,3,3,3,1,0,0,0,1},{3,3,3,3,3,3,3,1,0,0,1,0} },
{ {3,3,3,3,3,3,1,3,0,0,0,1},{3,3,3,3,3,3,1,3,0,0,1,0} },
{ {3,3,3,3,3,1,3,3,0,0,0,1},{3,3,3,3,3,1,3,3,0,0,1,0} }
},
{


{ {0,3,3,3,3,3,3,3,0,1,0,1},{0,3,3,3,3,3,3,3,0,1,1,0} },
{ {0,3,3,3,3,3,3,3,1,0,0,1},{0,3,3,3,3,3,3,3,1,0,1,0} },
{ {0,3,3,3,3,3,3,1,0,0,0,1},{0,3,3,3,3,3,3,1,0,0,1,0} },
{ {0,3,3,3,3,3,1,3,0,0,0,1},{0,3,3,3,3,3,1,3,0,0,1,0} },
{ {0,3,3,3,3,1,3,3,0,0,0,1},{0,3,3,3,3,1,3,3,0,0,1,0} }
},
{


{ {3,0,3,3,3,3,3,3,0,1,0,1},{3,0,3,3,3,3,3,3,0,1,1,0} },
{ {3,0,3,3,3,3,3,3,1,0,0,1},{3,0,3,3,3,3,3,3,1,0,1,0} },
{ {3,0,3,3,3,3,3,1,0,0,0,1},{3,0,3,3,3,3,3,1,0,0,1,0} },
{ {3,0,3,3,3,3,1,3,0,0,0,1},{3,0,3,3,3,3,1,3,0,0,1,0} },
{ {3,0,3,3,3,1,3,3,0,0,0,1},{3,0,3,3,3,1,3,3,0,0,1,0} }
},
{


{ {0,0,3,3,3,3,3,3,0,1,0,1},{0,0,3,3,3,3,3,3,0,1,1,0} },
{ {0,0,3,3,3,3,3,3,1,0,0,1},{0,0,3,3,3,3,3,3,1,0,1,0} },
{ {0,0,3,3,3,3,3,1,0,0,0,1},{0,0,3,3,3,3,3,1,0,0,1,0} },
{ {0,0,3,3,3,3,1,3,0,0,0,1},{0,0,3,3,3,3,1,3,0,0,1,0} },
{ {0,0,3,3,3,1,3,3,0,0,0,1},{0,0,3,3,3,1,3,3,0,0,1,0} }
},
{


{ {3,3,0,3,3,3,3,3,0,1,0,1},{3,3,0,3,3,3,3,3,0,1,1,0} },
{ {3,3,0,3,3,3,3,3,1,0,0,1},{3,3,0,3,3,3,3,3,1,0,1,0} },
{ {3,3,0,3,3,3,3,1,0,0,0,1},{3,3,0,3,3,3,3,1,0,0,1,0} },
{ {3,3,0,3,3,3,1,3,0,0,0,1},{3,3,0,3,3,3,1,3,0,0,1,0} },
{ {3,3,0,3,3,1,3,3,0,0,0,1},{3,3,0,3,3,1,3,3,0,0,1,0} }
},
{


{ {0,3,0,3,3,3,3,3,0,1,0,1},{0,3,0,3,3,3,3,3,0,1,1,0} },
{ {0,3,0,3,3,3,3,3,1,0,0,1},{0,3,0,3,3,3,3,3,1,0,1,0} },
{ {0,3,0,3,3,3,3,1,0,0,0,1},{0,3,0,3,3,3,3,1,0,0,1,0} },
{ {0,3,0,3,3,3,1,3,0,0,0,1},{0,3,0,3,3,3,1,3,0,0,1,0} },
{ {0,3,0,3,3,1,3,3,0,0,0,1},{0,3,0,3,3,1,3,3,0,0,1,0} }
},
{


{ {3,0,0,3,3,3,3,3,0,1,0,1},{3,0,0,3,3,3,3,3,0,1,1,0} },
{ {3,0,0,3,3,3,3,3,1,0,0,1},{3,0,0,3,3,3,3,3,1,0,1,0} },
{ {3,0,0,3,3,3,3,1,0,0,0,1},{3,0,0,3,3,3,3,1,0,0,1,0} },
{ {3,0,0,3,3,3,1,3,0,0,0,1},{3,0,0,3,3,3,1,3,0,0,1,0} },
{ {3,0,0,3,3,1,3,3,0,0,0,1},{3,0,0,3,3,1,3,3,0,0,1,0} }
},
{


{ {0,0,0,3,3,3,3,3,0,1,0,1},{0,0,0,3,3,3,3,3,0,1,1,0} },
{ {0,0,0,3,3,3,3,3,1,0,0,1},{0,0,0,3,3,3,3,3,1,0,1,0} },
{ {0,0,0,3,3,3,3,1,0,0,0,1},{0,0,0,3,3,3,3,1,0,0,1,0} },
{ {0,0,0,3,3,3,1,3,0,0,0,1},{0,0,0,3,3,3,1,3,0,0,1,0} },
{ {0,0,0,3,3,1,3,3,0,0,0,1},{0,0,0,3,3,1,3,3,0,0,1,0} }
},
{


{ {3,3,3,0,3,3,3,3,0,1,0,1},{3,3,3,0,3,3,3,3,0,1,1,0} },
{ {3,3,3,0,3,3,3,3,1,0,0,1},{3,3,3,0,3,3,3,3,1,0,1,0} },
{ {3,3,3,0,3,3,3,1,0,0,0,1},{3,3,3,0,3,3,3,1,0,0,1,0} },
{ {3,3,3,0,3,3,1,3,0,0,0,1},{3,3,3,0,3,3,1,3,0,0,1,0} },
{ {3,3,3,0,3,1,3,3,0,0,0,1},{3,3,3,0,3,1,3,3,0,0,1,0} }
},
{


{ {0,3,3,0,3,3,3,3,0,1,0,1},{0,3,3,0,3,3,3,3,0,1,1,0} },
{ {0,3,3,0,3,3,3,3,1,0,0,1},{0,3,3,0,3,3,3,3,1,0,1,0} },
{ {0,3,3,0,3,3,3,1,0,0,0,1},{0,3,3,0,3,3,3,1,0,0,1,0} },
{ {0,3,3,0,3,3,1,3,0,0,0,1},{0,3,3,0,3,3,1,3,0,0,1,0} },
{ {0,3,3,0,3,1,3,3,0,0,0,1},{0,3,3,0,3,1,3,3,0,0,1,0} }
},
{


{ {3,0,3,0,3,3,3,3,0,1,0,1},{3,0,3,0,3,3,3,3,0,1,1,0} },
{ {3,0,3,0,3,3,3,3,1,0,0,1},{3,0,3,0,3,3,3,3,1,0,1,0} },
{ {3,0,3,0,3,3,3,1,0,0,0,1},{3,0,3,0,3,3,3,1,0,0,1,0} },
{ {3,0,3,0,3,3,1,3,0,0,0,1},{3,0,3,0,3,3,1,3,0,0,1,0} },
{ {3,0,3,0,3,1,3,3,0,0,0,1},{3,0,3,0,3,1,3,3,0,0,1,0} }
},
{


{ {0,0,3,0,3,3,3,3,0,1,0,1},{0,0,3,0,3,3,3,3,0,1,1,0} },
{ {0,0,3,0,3,3,3,3,1,0,0,1},{0,0,3,0,3,3,3,3,1,0,1,0} },
{ {0,0,3,0,3,3,3,1,0,0,0,1},{0,0,3,0,3,3,3,1,0,0,1,0} },
{ {0,0,3,0,3,3,1,3,0,0,0,1},{0,0,3,0,3,3,1,3,0,0,1,0} },
{ {0,0,3,0,3,1,3,3,0,0,0,1},{0,0,3,0,3,1,3,3,0,0,1,0} }
},
{


{ {3,3,0,0,3,3,3,3,0,1,0,1},{3,3,0,0,3,3,3,3,0,1,1,0} },
{ {3,3,0,0,3,3,3,3,1,0,0,1},{3,3,0,0,3,3,3,3,1,0,1,0} },
{ {3,3,0,0,3,3,3,1,0,0,0,1},{3,3,0,0,3,3,3,1,0,0,1,0} },
{ {3,3,0,0,3,3,1,3,0,0,0,1},{3,3,0,0,3,3,1,3,0,0,1,0} },
{ {3,3,0,0,3,1,3,3,0,0,0,1},{3,3,0,0,3,1,3,3,0,0,1,0} }
},
{


{ {0,3,0,0,3,3,3,3,0,1,0,1},{0,3,0,0,3,3,3,3,0,1,1,0} },
{ {0,3,0,0,3,3,3,3,1,0,0,1},{0,3,0,0,3,3,3,3,1,0,1,0} },
{ {0,3,0,0,3,3,3,1,0,0,0,1},{0,3,0,0,3,3,3,1,0,0,1,0} },
{ {0,3,0,0,3,3,1,3,0,0,0,1},{0,3,0,0,3,3,1,3,0,0,1,0} },
{ {0,3,0,0,3,1,3,3,0,0,0,1},{0,3,0,0,3,1,3,3,0,0,1,0} }
},
{


{ {3,0,0,0,3,3,3,3,0,1,0,1},{3,0,0,0,3,3,3,3,0,1,1,0} },
{ {3,0,0,0,3,3,3,3,1,0,0,1},{3,0,0,0,3,3,3,3,1,0,1,0} },
{ {3,0,0,0,3,3,3,1,0,0,0,1},{3,0,0,0,3,3,3,1,0,0,1,0} },
{ {3,0,0,0,3,3,1,3,0,0,0,1},{3,0,0,0,3,3,1,3,0,0,1,0} },
{ {3,0,0,0,3,1,3,3,0,0,0,1},{3,0,0,0,3,1,3,3,0,0,1,0} }
},
{


{ {0,0,0,0,3,3,3,3,0,1,0,1},{0,0,0,0,3,3,3,3,0,1,1,0} },
{ {0,0,0,0,3,3,3,3,1,0,0,1},{0,0,0,0,3,3,3,3,1,0,1,0} },
{ {0,0,0,0,3,3,3,1,0,0,0,1},{0,0,0,0,3,3,3,1,0,0,1,0} },
{ {0,0,0,0,3,3,1,3,0,0,0,1},{0,0,0,0,3,3,1,3,0,0,1,0} },
{ {0,0,0,0,3,1,3,3,0,0,0,1},{0,0,0,0,3,1,3,3,0,0,1,0} }
}
};




extern unsigned char RFsendCode[20];
extern volatile unsigned char RFsendFlag;
extern unsigned char RFcodePlace;
extern unsigned char RFcodeBit;
extern volatile unsigned char Sendcount;
extern unsigned char RFConfig;
volatile unsigned char Sent;
extern volatile unsigned char RF_IR_Postscaler;
extern unsigned char RF_IR;
extern unsigned char RFPause;
extern unsigned char Conf2_ChannelB_Status;
extern unsigned char Conf2_ChannelD_Status;
extern unsigned char Conf2_ChannelH_1_Status;
extern unsigned char Conf2_ChannelH_2_Status;
extern unsigned char Conf2_ChannelH_3_Status;
extern unsigned char Conf3_Status[16][5];

# 453
unsigned char SendRF(const unsigned char* Code, unsigned char Config, unsigned char size, unsigned char RepeatAmount);
void SendRF_wait(const unsigned char* Code, unsigned char Config, unsigned char size, unsigned char amount);
void SendRF_Channel(unsigned char channel);
unsigned char GetRFstatus(void);
void DisplayRF_Channel(unsigned char channel);
inline void RFon();
inline void RFoff();
void Send_RForIR_bit(void);

# 124 "UART.h"
extern volatile unsigned char ReceivedString[70];
extern volatile unsigned char ReceivedStringPos;
extern volatile unsigned char CommandString[100];
extern volatile unsigned char CommandStringPos;
extern volatile unsigned char NewReceivedString;
const unsigned char SYNTAX_ERR[] = "Error: Syntax";
const unsigned char CRLN[] = "\r\n";
unsigned char BufferOverflow = 0;




void Local_CloseUSART(void );
void InitUART(unsigned long Baud);
void OpenUSART( unsigned char config, unsigned int spbrg);
void UARTchar(unsigned char data);
void UARTchar_CONST(const unsigned char data);
void UARTstring(unsigned char *data);
void UARTstring_CONST(const unsigned char *data);
unsigned char ReadUSART(void);
void UART_send_break(void);
void UARTstringCRLN(unsigned char *data);
void UARTstringCRLN_CONST(const unsigned char *data);
void UARTcommandMenu(const unsigned char *Command,const unsigned char *Desc);
void EraseScreen(unsigned char characters);
void ClearUSART(void);
void PrintHeader(const unsigned char* Title);

# 67 "MISC.h"
void delayUS(long US);
unsigned char IsCharacter(unsigned char data);
void cleanBuffer(unsigned char* data, int count);
void cleanBuffer16bit(unsigned int* data, int count);
double Round(double input);
void BufferCopy(unsigned char* from,unsigned char* to, unsigned char count, signed char shift);
unsigned char StringMatch(const unsigned char* This, const unsigned char* That);
unsigned char StringMatchCaseInsensitive(const unsigned char* This, const unsigned char* That);
unsigned char StringContains(const unsigned char* This, const unsigned char* That);
unsigned char StringContainsCaseInsensitive(const unsigned char* This, const unsigned char* That);
void CalibrateDelay(void);
void lowercaseChar(unsigned char* Input);
void lowercaseString(unsigned char* Input);
void delayNOP(unsigned char NOPs);
unsigned char Reverse_Byte(unsigned char This);
unsigned int Reverse_2Byte(unsigned int This);
unsigned long Reverse_4Byte(unsigned long This);
unsigned char GetNumber(unsigned char* This, unsigned char CommaNumber, long* result);
unsigned char StringAddEqual(unsigned char* Input);
unsigned char GetStringAfterComma(unsigned char* This, unsigned char CommaNumber, unsigned char* result);
unsigned char GetNumberUnsigned(unsigned char* This, unsigned char CommaNumber, unsigned long* result);
unsigned char IsAlphaNumericString(unsigned char* data);
unsigned char IsAlphaNumeric(unsigned char data);
unsigned char IsNumber(unsigned char data);
unsigned char Invert(unsigned char data);

# 104 "EEPROM.h"
typedef struct EEdata
{
unsigned char BlueToothFlag;
unsigned long SWNECcode;

unsigned char RemoteButtonNEC[12][2];


unsigned char EEPROMinitFlag;
}GBLdata1;

typedef struct EEdata2
{

# 129
unsigned char RemoteButtonRF[89][1][2];

# 135
unsigned long SerialNumber;
}GBLdata2;




GBLdata1 Global1 = 0;
GBLdata2 Global2 = 0;

# 148
unsigned int ReadEEPROM_1Byte(unsigned int address);
void EEPROM_UNLOCK(void);
void WriteEEPROM_1Byte(unsigned int address, unsigned char data);
void GetEEPROM1(GBLdata1 *Temp);
unsigned long SetEEPROM1(unsigned long burn);
void GetEEPROM2(GBLdata2 *Temp);
unsigned long SetEEPROM2(unsigned long burn);
unsigned long GetMemoryLong(unsigned int AddressFirst);
unsigned char SetMemoryLong(unsigned long Data, unsigned int AddressFirst);
unsigned long GetMemoryInt(unsigned int AddressFirst);
unsigned char SetMemoryInt(unsigned int Data, unsigned int AddressFirst);
unsigned long GetMemoryChar(unsigned int AddressFirst);
unsigned char SetMemoryChar(unsigned char Data, unsigned int AddressFirst);
unsigned char SyncGlobalToEEPROM(void);
void SyncEEPROMToGlobal(void);
void SetEEPROMdefault(void);
unsigned char EEPROMinitialized(void);
void SyncEEPROMToGlobal1(void);
void SyncEEPROMToGlobal2(void);

# 196 "IR.h"
extern unsigned char IRpinOLD;
extern unsigned int IRRawCode[80];
extern volatile unsigned long IR_NEC;
extern unsigned char IRrawCodeNum;
extern volatile unsigned char IR_New_Code;
extern unsigned char IRbit;
extern unsigned char IRrepeatflag;
extern unsigned char IRsendFlag;
extern unsigned char IRcodeBit;
extern unsigned char IRcodePlace;
extern unsigned long IRsendCode;
extern unsigned char IRrepeatAmount;
extern volatile unsigned char IRmod;
extern volatile unsigned char ReceivingIR;
extern volatile unsigned char IRbitPosition;
extern unsigned long IRtimeout;
extern unsigned char IRstarted;




void InitIR(void);
unsigned char ReadIRpin(void);
unsigned char IRrawToNEC(unsigned long* NEC, unsigned char Invert);
void UseIRCode(unsigned char* Code, unsigned long NEC);
unsigned char SendNEC_bytes(unsigned long code, unsigned char RepeatAmount);
void SendNEC_wait(unsigned long code, unsigned char RepeatAmount);
void CalibrateIR(void);
unsigned char CheckReceivingIR(void);
unsigned char DecodeNEC(unsigned long Nec, unsigned char* address, unsigned char* command);
unsigned long EncodeNEC(unsigned char address, unsigned char command);
inline void IRreceiverIntOn(void);
inline void IRreceiverIntOff(void);

# 39 "Timer.h"
extern unsigned char Timer1_Postscaler;
extern unsigned char Timer2_Postscaler;
extern unsigned char Timer3_Postscaler;

# 176
void InitTimer0(void);
void ResetTimer0(void);
void SetTimer0(unsigned int temp);
void InitTimer1(void);
void ResetTimer1(void);
void InitTimer2(void);
void LEDTimerON(void);
void InitTimer3(void);
void ResetTimer3(void);
void InitTimers(void);

# 82 "ADC.h"
double ReadVoltage(void);
unsigned char InternalADC_Read(unsigned char channel, unsigned int *ADCcounts);
void ResetADC(void);
void InitADC(void);
void VoltageDividerON(void);
void VoltageDividerOFF(void);

# 62 "Bluetooth.c"
extern const unsigned char FirmVersion[];
extern const unsigned char PCBVersion[];
extern const unsigned char Frequency[];
extern unsigned char BluetoothFirmware1[30];
extern unsigned char BluetoothFirmware2[30];
extern unsigned char BluetoothBroadcast[21];
unsigned char BluetoothChangeStatus = 0;
unsigned char BluetoothFirmware1[30];
unsigned char BluetoothFirmware2[30];
unsigned char BluetoothBroadcast[21];

# 82
void InitBluetooth(void)
{
cleanBuffer(ReceivedString,70);
ReceivedStringPos = 0;
cleanBuffer(CommandString,100);
CommandStringPos = 0;

LATA &= ~0x10;
LATA |= 0x08;
LATA &= ~0x10;
if(!BluetoothConfigured())
{
if(BluetoothInitialSetup(1))
{
Global1.BlueToothFlag = 1;
SyncGlobalToEEPROM();
}
ResetBlue();
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
}
}

# 111
unsigned char BlueConnected(void)
{

if((PORTA & 0x02) == 0x02)
{
return 1;
}
return 0;
}

# 126
void ResetBlue(void)
{
LATA &= ~0x04;
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
LATA |= 0x04;
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
}

# 147
unsigned char EnterCommandMode(void)
{
unsigned char count = 0;
unsigned char buf[50];
while(BlueConnected())
{
ResetBlue();
count++;
if(count > 4)
{

return 0;
}
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
delayUS(50000);
}

ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("$$$");
delayUS(50000);
PIE1bits.RCIE = 0;
sprintf(buf,"CMD");
if(StringContains(CommandString,buf))
{
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;
return 1;
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;
return 0;
}

# 191
unsigned char BluetoothInitialSetup(unsigned char Default)
{
unsigned char buf[50];
unsigned char ok = 1;
unsigned char BluetoothVersionLine1[30];
unsigned char BluetoothVersionLine2[30];
unsigned char i = 0;
unsigned char j = 0;
unsigned char first = 1;
unsigned char BroadcastTEMP[21];

cleanBuffer(buf,50);
cleanBuffer(BroadcastTEMP,21);
cleanBuffer(BluetoothVersionLine1,30);
cleanBuffer(BluetoothVersionLine2,30);

if(!EnterCommandMode())
{
return 0;
}

cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("V\r");
delayUS(50000);
PIE1bits.RCIE = 0;
for(i=0; i < (30 * 2); i++)
{
if(first == 1)
{
if(CommandString[i] == '\n' || CommandString[i] == '\r')
{
first = 0;
}
else
{
if( i < (30 - 1))
{
BluetoothVersionLine1[i] = CommandString[i];
}
}
}
else
{
if(CommandString[i] != '\n' && CommandString[i] != '\r')
{
if( j < (30 - 1))
{
BluetoothVersionLine2[j] = CommandString[i];
}
j++;
}
else
{
if(j > 2)
{

break;
}
}
}
}

if(BluetoothVersionLine1[0] == 0 || BluetoothVersionLine2[0] == 0)
{
ok = 0;
}
else
{
cleanBuffer(BluetoothFirmware1,30);
cleanBuffer(BluetoothFirmware2,30);
BufferCopy(BluetoothVersionLine1, BluetoothFirmware1, 30, 0);
BufferCopy(BluetoothVersionLine2, BluetoothFirmware2, 30, 0);
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(Default)
{
if(ok)
{
sprintf(buf,"SN,Home Automation %lu\r",Global2.SerialNumber);
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring(buf);
delayUS(50000);
PIE1bits.RCIE = 0;
sprintf(buf,"AOK");
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
}
else
{
if(ok)
{
if(BluetoothBroadcast[21-1] == 0 )
{
BufferCopy(BluetoothBroadcast,BroadcastTEMP, 21, 0);
sprintf(buf,"SN,%s\r",BroadcastTEMP);
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring(buf);
delayUS(50000);
PIE1bits.RCIE = 0;
sprintf(buf,"AOK");
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
else
{
ok = 0;
}
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("SU,115K\r");
delayUS(50000);
PIE1bits.RCIE = 0;
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("SS,Home Automation\r");
delayUS(50000);
PIE1bits.RCIE = 0;
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("SY,0010\r");
delayUS(50000);
PIE1bits.RCIE = 0;
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("S~,0\r");
delayUS(50000);
PIE1bits.RCIE = 0;
if(!StringContains(CommandString,buf))
{
ok = 0;
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("D\r");
delayUS(50000);
PIE1bits.RCIE = 0;
if(Default)
{
sprintf(buf,"BTName=Home Automation %lu\r",Global2.SerialNumber);
}
else
{
sprintf(buf,"BTName=%s\r",BroadcastTEMP);
}
if(!StringContainsCaseInsensitive(CommandString, buf))
{
if(Global2.SerialNumber != 0xFFFFFFFF)
{
ok = 0;
}
}
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
UARTstring_CONST("---\r");
delayUS(50000);
sprintf(buf,"END");
PIE1bits.RCIE = 0;
if(!StringContains(CommandString,buf))
{
ok = 0;
}
cleanBuffer(CommandString,CommandStringPos);
CommandStringPos = 0;

if(ok)
{
return 1;
}
return 0;
}

# 435
unsigned char BluetoothConfigured(void)
{
if(Global1.BlueToothFlag != 1)
{
return 0;
}
return 1;
}

# 449
unsigned char UseBluetooth(unsigned char *String, unsigned char StringPos)
{
unsigned char ok = 1;

unsigned long EnteredNEC = 0;
unsigned char NecAddress = 0;
unsigned char NecCommand = 0;
unsigned long temp = 0;
unsigned long tempNec = 0;
unsigned char buf[100];
unsigned char bufSmall[10];
unsigned char timeout =0;
unsigned char rfchannelSTR[10];
unsigned char rfconf, i, j, k, tempRFArray;
unsigned char device = 0;
unsigned char EmptyPlace = 0;
unsigned char set = 0;
long SerialNumberTEMP = 0;
unsigned char ReceivedStringPosOLD = 0;
unsigned char system;
unsigned char EqualStatus = 0;
unsigned char channel;
unsigned char button;
unsigned char action;

cleanBuffer(buf,100);
cleanBuffer(bufSmall,10);
cleanBuffer(rfchannelSTR,10);

if(StringMatchCaseInsensitive(String,"Rf All"))
{
for(i=0; i < 89; i++)
{
SendRF_Channel(i);
UARTstring_CONST("Sent ");
DisplayRF_Channel(i);
UARTstring_CONST(CRLN);
}
return 1;
}
else if(StringContainsCaseInsensitive(String,"Conf1"))
{
RFPause = 0;
if(StringMatchCaseInsensitive(String,Conf1_ChannelD_STR))
{

SendRF_wait(Conf1_ChannelD,1,12,7);
}
else if(StringMatchCaseInsensitive(String,Conf1_ChannelE_STR))
{

SendRF_wait(Conf1_ChannelE,1,12,7);
}
else if(StringMatchCaseInsensitive(String,Conf1_ChannelF_STR))
{

SendRF_wait(Conf1_ChannelF,1,12,7);
}
else
{

UARTstring_CONST(SYNTAX_ERR);
UARTstring_CONST(CRLN);
return 0;
}
UARTstringCRLN_CONST("Configuration 1 RF code sent");
return 1;
}
else if(StringContainsCaseInsensitive(String,"Conf2"))
{
RFPause = 0;
if(StringMatchCaseInsensitive(String,Conf2_ChannelB_ON_STR))
{

SendRF_wait(Conf2_ChannelB_ON,2,16,7);
Conf2_ChannelB_Status = 1;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelB_OFF_STR))
{

SendRF_wait(Conf2_ChannelB_OFF,2,16,7);
Conf2_ChannelB_Status = 0;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelD_ON_STR))
{

SendRF_wait(Conf2_ChannelD_ON,2,16,7);
Conf2_ChannelD_Status = 1;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelD_OFF_STR))
{

SendRF_wait(Conf2_ChannelD_OFF,2,16,7);
Conf2_ChannelD_Status = 0;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_1_ON_STR))
{

SendRF_wait(Conf2_ChannelH_1_ON,2,16,7);
Conf2_ChannelH_1_Status = 1;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_1_OFF_STR))
{

SendRF_wait(Conf2_ChannelH_1_OFF,2,16,7);
Conf2_ChannelH_1_Status = 0;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_2_ON_STR))
{

SendRF_wait(Conf2_ChannelH_2_ON,2,16,7);
Conf2_ChannelH_2_Status = 1;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_2_OFF_STR))
{

SendRF_wait(Conf2_ChannelH_2_OFF,2,16,7);
Conf2_ChannelH_2_Status = 0;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_3_ON_STR))
{

SendRF_wait(Conf2_ChannelH_3_ON,2,16,7);
Conf2_ChannelH_3_Status = 1;
}
else if(StringMatchCaseInsensitive(String,Conf2_ChannelH_3_OFF_STR))
{

SendRF_wait(Conf2_ChannelH_3_OFF,3,16,7);
Conf2_ChannelH_3_Status = 0;
}
else
{

UARTstring_CONST(SYNTAX_ERR);
UARTstring_CONST(CRLN);
return 0;
}
UARTstringCRLN_CONST("Configuration 2 RF code sent");
return 1;
}
else if(StringContainsCaseInsensitive(String,"Conf3_Channel"))
{

RFPause = 0;
BufferCopy(String,buf, 127, -13);
channel = buf[0];
lowercaseChar(&channel);
button = buf[1];
if(buf[2] == '_')
{
bufSmall[0] = channel;
if(StringContainsCaseInsensitive(Conf3_Channels,bufSmall))
{
if(IsNumber(channel))
{
channel -= '0';
}
else
{

channel -= 'a';
channel += 10;
}
bufSmall[0] = button;
if(StringContainsCaseInsensitive(Conf3_Buttons,bufSmall))
{
button -= '0';
button--;
if(StringContainsCaseInsensitive(String,"_ON"))
{
action = 0;
}
else if(StringContainsCaseInsensitive(String,"_OFF"))
{
action = 1;
}
else
{

UARTstringCRLN_CONST("Error: Must contain action (ON or OFF)");
return 0;
}
SendRF_wait(&Conf3[channel][button][action][0],3,12,7);
if(action == 0)
{

}
Conf3_Status[channel][button] = Invert(action);
}
else
{

UARTstringCRLN_CONST("Error: Button incorrect");
return 0;
}
}
else
{

UARTstringCRLN_CONST("Error: Channel incorrect");
return 0;
}
}
else
{

UARTstringCRLN_CONST("Error: channel must be 2 characters");
return 0;
}
UARTstringCRLN_CONST("Configuration 3 RF code sent");
return 1;
}
else if(StringContainsCaseInsensitive(String,"NEC"))
{
if(!GetNumberUnsigned(String, 1, &temp))
{
if(temp > 0xFF)
{
UARTstringCRLN_CONST("Error: Command larger that 255");
UARTstring_CONST(CRLN);
return 0;
}
NecCommand = (unsigned char)temp;
if(!GetNumberUnsigned(String, 0, &temp))
{
if(temp > 0xFF)
{
UARTstringCRLN_CONST("Error: Address larger that 255");
UARTstring_CONST(CRLN);
return 0;
}
NecAddress = (unsigned char) temp;
sprintf(buf,"NEC address: 0x%02X ", NecAddress);
UARTstringCRLN(buf);
sprintf(buf,"NEC command: 0x%02X ", NecCommand);
UARTstringCRLN(buf);
EnteredNEC = EncodeNEC(NecAddress, NecCommand);
SendNEC_wait(EnteredNEC,0);
sprintf(buf,"Sent NEC code = 0x%lX ", EnteredNEC);
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);
return 1;
}
else
{
UARTstringCRLN_CONST("Error: could not decode Address");
UARTstring_CONST(CRLN);
return 0;
}
}
else if(!GetNumberUnsigned(String, 0, &EnteredNEC))
{
SendNEC_wait(EnteredNEC,0);
sprintf(buf,"sent NEC code 0x%lX", EnteredNEC);
UARTstringCRLN(buf);
if(DecodeNEC(EnteredNEC, &NecAddress, &NecCommand))
{
sprintf(buf,"address: 0x%02X ", NecAddress);
UARTstringCRLN(buf);
sprintf(buf,"command: 0x%02X ", NecCommand);
UARTstringCRLN(buf);
}
else
{
UARTstringCRLN_CONST("Error: could not decode NEC code");
UARTstring_CONST(CRLN);
return 0;
}
UARTstring_CONST(CRLN);
return 1;
}
else
{
if(!StringContains(String,"?"))
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("NEC code not entered correctly");
}
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Usage:");
UARTstringCRLN_CONST("NEC = (32 bit code)");
UARTstringCRLN_CONST("        or");
UARTstringCRLN_CONST("NEC = address, command");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Example:");
UARTstringCRLN_CONST("NEC = 0x1CE350AF ");
UARTstringCRLN_CONST("      or");
UARTstringCRLN_CONST("NEC = 0x38, 0x0A");
UARTstring_CONST(CRLN);
return 0;
}
}
else if(StringContainsCaseInsensitive(String,"RemoteButton"))
{
EqualStatus = StringAddEqual(String);
if(EqualStatus)
{
if(EqualStatus == 2)
{
StringPos++;
}
if(!GetNumberUnsigned(String, 0, &temp))
{
if(temp <= 12 && temp > 0)
{
if(!StringContainsCaseInsensitive(String,"set"))
{
tempNec = EncodeNEC(Global1.RemoteButtonNEC[temp-1][0], Global1.RemoteButtonNEC[temp-1][1]);
if(tempNec != 0x00FF00FF)
{
SendNEC_wait(tempNec,0);
sprintf(buf,"Sent NEC code 0x%lX ", tempNec);
UARTstringCRLN(buf);
sprintf(buf,"NEC Code address: 0x%02X , command: 0x%02X ",Global1.RemoteButtonNEC[temp-1][0], Global1.RemoteButtonNEC[temp-1][1]);
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);
return 1;
}
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Error: No NEC code saved for specified command");
return 0;
}
else
{
if(!WaitForIRsignal())
{
return 0;
}


DecodeNEC(IR_NEC, &NecAddress, &NecCommand);
Global1.RemoteButtonNEC[temp - 1][0] = NecAddress;
Global1.RemoteButtonNEC[temp - 1][1] = NecCommand;
SyncGlobalToEEPROM();
UARTstring_CONST(CRLN);
sprintf(buf,"RemoteButton%lu now transmits NEC code 0x%lX ",temp, IR_NEC);
UARTstringCRLN(buf);
sprintf(buf,"NEC Code address: 0x%02X , command: 0x%02X ",NecAddress, NecCommand);
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);

for(i =0;i<10;i++)
{
(LATC |= 0x04);
delayUS(50000);
(LATC &= ~0x04);
delayUS(50000);
}
return 1;
}
}
else
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Error: Remote button number too high");
UARTstring_CONST(CRLN);
return 0;
}
}
}
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Error: Remote button not specified");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Usage:");
UARTstringCRLN_CONST("RemoteButton\"x\"");
UARTstringCRLN_CONST("RemoteButton\"x\" set");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Example:");
UARTstringCRLN_CONST("RemoteButton1");
UARTstringCRLN_CONST("RemoteButton1 set");
UARTstring_CONST(CRLN);
return 0;
}
else if(StringContainsCaseInsensitive(String,"RF set") || StringContainsCaseInsensitive(String,"RF clear"))
{
system = 0;
if(StringContainsCaseInsensitive(String,"RF set"))
{
set = 1;
}
else
{
set = 0;
if(StringContainsCaseInsensitive(String,"system"))
{
system = 1;
}
}
if(StringContainsCaseInsensitive(String,"All"))
{
if(!WaitForIRsignal())
{
return 0;
}
UARTstring_CONST(CRLN);
DecodeNEC(IR_NEC, &NecAddress, &NecCommand);
EmptyPlace = 1;
for(j=0; j < 89; j++)
{
ok = 0;
for(i=0; i < 1; i++)
{
if(Global2.RemoteButtonRF[j][i][0] == 0 && Global2.RemoteButtonRF[j][i][1] == 0)
{
EmptyPlace = i;
ok = 1;
break;
}
}
if(set == 1)
{
if(!ok)
{
UARTstring_CONST("Error: No space available to save ");
DisplayRF_Channel(j);
UARTstring_CONST(CRLN);
}
else
{
if(EmptyPlace)
{

for(i=0; i < EmptyPlace; i++)
{
if(NecAddress == Global2.RemoteButtonRF[j][i][0])
{
if(NecCommand == Global2.RemoteButtonRF[j][i][1])
{
ok = 0;
break;
}
}
}
}
if(!ok)
{
UARTstring_CONST("Error: NEC code already saved to ");
DisplayRF_Channel(j);
UARTstring_CONST(CRLN);
}
else
{

Global2.RemoteButtonRF[j][EmptyPlace][0] = NecAddress;
Global2.RemoteButtonRF[j][EmptyPlace][1] = NecCommand;
}
}
}
else
{
if(EmptyPlace)
{

for(i=0; i < EmptyPlace; i++)
{
if(NecAddress == Global2.RemoteButtonRF[j][i][0])
{
if(NecCommand == Global2.RemoteButtonRF[j][i][1])
{

Global2.RemoteButtonRF[j][i][0] = 0;
Global2.RemoteButtonRF[j][i][1] = 0;
for(k=i; k < (1 -1); k++)
{

Global2.RemoteButtonRF[j][k][0] = Global2.RemoteButtonRF[j][k+1][0];
Global2.RemoteButtonRF[j][k][1] = Global2.RemoteButtonRF[j][k+1][1];
}
break;
}
}
}
}
}
}

SyncGlobalToEEPROM();


for(i =0;i<10;i++)
{
if(set == 1)
{
(LATC |= 0x04);
}
else
{
(LATC |= 0x02);
}
delayUS(50000);
if(set == 1)
{
(LATC &= ~0x04);
}
else
{
(LATC &= ~0x02);
}
delayUS(50000);
}
if(set == 1)
{
sprintf(buf,"NEC code 0x%lX now transmits all RF codes",IR_NEC);
}
else
{
sprintf(buf,"NEC code 0x%lX will no longer transmit any RF codes",IR_NEC);
}
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);
return 1;
}
if(system != 1)
{
EqualStatus = StringAddEqual(String);
if(!EqualStatus)
{
UARTstringCRLN_CONST("Error: No RF configuration specified");
UARTstring_CONST(CRLN);
return 0;
}
if(EqualStatus == 2)
{
StringPos++;
}
UARTstring_CONST(CRLN);
if(!GetNumberUnsigned(String, 0, &temp))
{
rfconf = (unsigned char) temp;
}
else
{
UARTstringCRLN_CONST("Error: RF configuration Syntax not understood");
UARTstring_CONST(CRLN);
return 0;
}
if(rfconf <= 0 || rfconf > 3)
{
UARTstringCRLN_CONST("Error: RF configuration out of range");
UARTstring_CONST(CRLN);
return 0;
}
if(GetStringAfterComma(String, 1, rfchannelSTR))
{
UARTstringCRLN_CONST("Error: RF Channel Syntax not understood");
UARTstring_CONST(CRLN);
return 0;
}
else
{
lowercaseString(rfchannelSTR);
if(rfconf == 1 || rfconf == 2)
{

if(rfchannelSTR[1] == 0 || rfchannelSTR[1] == ' ')
{
rfchannelSTR[1] = 0;
if(rfconf == 1)
{
if(!StringContainsCaseInsensitive(Conf1_Channels, rfchannelSTR))
{
ok = 0;
}
}
else if(rfconf == 2)
{
if(!StringContainsCaseInsensitive(Conf2_Channels, rfchannelSTR))
{
ok = 0;
}
}
if(!ok)
{
UARTstringCRLN_CONST("Error: RF channel out of range");
UARTstring_CONST(CRLN);
return 0;
}

if(rfconf == 1)
{
if(rfchannelSTR[0] == 'd')
{
tempRFArray = 0;
}
else if(rfchannelSTR[0] == 'e')
{
tempRFArray = 1;
}
else if(rfchannelSTR[0] == 'f')
{
tempRFArray = 2;
}
else
{

return 0;
}
}
else if(rfconf ==2)
{
if(rfchannelSTR[0] == 'b')
{
tempRFArray = 3;
}
else if(rfchannelSTR[0] == 'd')
{
tempRFArray = 4;
}
else if(rfchannelSTR[0] == 'h')
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST("Which device?");
UARTstring_CONST(CRLN);
UARTchar('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Error: No RF config 2, channel H device specified");
return 0;
}
}
PIE1bits.RCIE = 0;
ok = 1;
if(ReceivedString[0] < '1' || ReceivedString[0] > '3')
{
UARTstringCRLN_CONST("Error: RF config 2, channel H device out of range");
ok = 0;
}
device = ReceivedString[0] - '0';
tempRFArray = device + 4;
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
if(!ok)
{
return 0;
}
}
else
{

return 0;
}
}
}
else
{
UARTstringCRLN_CONST("Error: RF channel needs to be one character");
UARTstring_CONST(CRLN);
return 0;
}
}
else if(rfconf == 3)
{

if((rfchannelSTR[1] != 0 && rfchannelSTR[0] != 0) && (rfchannelSTR[2] == 0 || rfchannelSTR[2] == ' '))
{
bufSmall[0] = rfchannelSTR[1];
rfchannelSTR[1] = 0;
if(!StringContainsCaseInsensitive(Conf3_Channels, rfchannelSTR))
{
ok = 0;
}
if(!StringContainsCaseInsensitive(Conf3_Buttons, bufSmall))
{
ok = 0;
}
if(!ok)
{
UARTstringCRLN_CONST("Error: RF channel or button out of range");
UARTstring_CONST(CRLN);
return 0;
}

if(IsNumber(rfchannelSTR[0]))
{

rfchannelSTR[0] -= '0';
}
else
{

rfchannelSTR[0] -= 'a';
rfchannelSTR[0] += 10;
}
tempRFArray = 8 + (rfchannelSTR[0] * 5);
tempRFArray += (bufSmall[0] - '1');
}
else
{
UARTstringCRLN_CONST("Error: RF channel needs to be two characters");
UARTstring_CONST(CRLN);
return 0;
}
}
}
}
if(set)
{
if(!WaitForIRsignal())
{
return 0;
}
UARTstring_CONST(CRLN);
DecodeNEC(IR_NEC, &NecAddress, &NecCommand);
ok = 0;
for(i=0; i < 1; i++)
{
if(Global2.RemoteButtonRF[tempRFArray][i][0] == 0 && Global2.RemoteButtonRF[tempRFArray][i][1] == 0)
{
EmptyPlace = i;
ok = 1;
break;
}
}
if(!ok)
{
UARTstringCRLN_CONST("Error: No space available to save this RF code");
return 0;
}
if(EmptyPlace)
{

for(i=0; i < EmptyPlace; i++)
{
if(NecAddress == Global2.RemoteButtonRF[tempRFArray][i][0])
{
if(NecCommand == Global2.RemoteButtonRF[tempRFArray][i][1])
{
ok = 0;
break;
}
}
}
}
if(!ok)
{
UARTstringCRLN_CONST("Error: NEC code already saved to this RF code");
return 0;
}


Global2.RemoteButtonRF[tempRFArray][EmptyPlace][0] = NecAddress;
Global2.RemoteButtonRF[tempRFArray][EmptyPlace][1] = NecCommand;
SyncGlobalToEEPROM();

if(device)
{
sprintf(buf,"NEC code 0x%lX now transmits RF config %d channel %c device %d",IR_NEC, rfconf, rfchannelSTR[0], device);
}
else
{
sprintf(buf,"NEC code 0x%lX now transmits RF config %d channel %c ",IR_NEC, rfconf, rfchannelSTR[0]);
}
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);

for(i =0;i<10;i++)
{
(LATC |= 0x04);
delayUS(50000);
(LATC &= ~0x04);
delayUS(50000);
}
return 1;
}
else
{

if(system == 1)
{
for(i=0; i < 1; i++)
{
for(k=0; k < 89; k++)
{

Global2.RemoteButtonRF[k][i][0] = 0;
Global2.RemoteButtonRF[k][i][1] = 0;
}
}
}
else
{
for(i=0; i < 1; i++)
{

Global2.RemoteButtonRF[tempRFArray][i][0] = 0;
Global2.RemoteButtonRF[tempRFArray][i][1] = 0;
}
}
SyncGlobalToEEPROM();
if(system == 1)
{
sprintf(buf,"All Remote buttons associated with RF codes successfully erased");
}
else
{
if(device)
{
sprintf(buf,"RF config %d channel %c device %d successfully erased",rfconf, rfchannelSTR[0], device);
}
else
{
sprintf(buf,"RF config %d channel %c successfully erased",rfconf, rfchannelSTR[0]);
}
}
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);

for(i =0;i<10;i++)
{
(LATC |= 0x02);
delayUS(50000);
(LATC &= ~0x02);
delayUS(50000);
}
return 1;
}
}
else if(StringMatchCaseInsensitive(String,"Reset"))
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST("Enter Y to reset or N to cancel");
UARTstring_CONST(CRLN);
UARTchar_CONST('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Device resumes without reset");
return 0;
}
}
PIE1bits.RCIE = 0;
if(ReceivedString[0] == 'Y' || ReceivedString[0] == 'y' && ReceivedString[1] == 0)
{

UARTstringCRLN_CONST("System will reset");
Global1.EEPROMinitFlag = 0;
SyncGlobalToEEPROM();
asm("reset");
return 1;
}
else
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Device resumes without reset");
}
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
return 0;
}
else if(StringMatchCaseInsensitive(String,"Change SN"))
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST("Enter special 'Code' to change serial number or N to cancel");
UARTstring_CONST(CRLN);
UARTchar('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Device resumes without changing serial number");
return 0;
}
}
PIE1bits.RCIE = 0;
if(StringMatch(ReceivedString,"Code"))
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST("Enter new Serial Number");
UARTstring_CONST(CRLN);
UARTchar_CONST('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(ReceivedStringPos != ReceivedStringPosOLD)
{
timeout = 0;
}
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Device resumes without changing serial number");
return 0;
}
ReceivedStringPosOLD = ReceivedStringPos;
}
EqualStatus = StringAddEqual(ReceivedString);
if(EqualStatus)
{
if(EqualStatus == 2)
{
ReceivedStringPos++;
}
if(!GetNumber(ReceivedString, 1, &SerialNumberTEMP))
{
if(SerialNumberTEMP > 0)
{
Global2.SerialNumber = (unsigned long) SerialNumberTEMP;
if(!SetEEPROM2(0x00000002))
{
SyncEEPROMToGlobal();
UARTstringCRLN_CONST("Serial Number successfully burned to EEPROM");
sprintf(buf,"Serial Number is now: %lu ",Global2.SerialNumber);
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);

UARTstringCRLN_CONST("System will reset");
Global1.EEPROMinitFlag = 0;
SyncGlobalToEEPROM();
UARTstring_CONST(CRLN);
asm("reset");
return 1;
}
else
{
UARTstringCRLN_CONST("Serial Number could not be burned to EEPROM");
UARTstring_CONST(CRLN);
return 0;
}

}
}
}
UARTstringCRLN_CONST("Serial Number entered incorrectly");
UARTstring_CONST(CRLN);
return 0;
}
else
{
UARTstringCRLN_CONST("The 'Code' was wrong!!!");
UARTstring_CONST(CRLN);
}
return 0;
}
else if(StringMatchCaseInsensitive(String,"Change Bluetooth Name"))
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST(CRLN);
UARTstring_CONST("Enter Y to change Name or N to cancel");
UARTstring_CONST(CRLN);
UARTchar('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Device resumes without changing Bluetooth Broadcast Name");
return 0;
}
}
PIE1bits.RCIE = 0;
if(ReceivedString[0] == 'Y' || ReceivedString[0] == 'y' && ReceivedString[1] == 0)
{
cleanBuffer(ReceivedString, ReceivedStringPos);
ReceivedStringPos = 0;
NewReceivedString = 0;
UARTstring_CONST(CRLN);
UARTstring_CONST("Enter new Bluetooth Broadcast Name");
UARTstring_CONST(CRLN);
UARTchar_CONST('>');
timeout = 0;
ClearUSART();
PIR1bits.RCIF = 0;
PIE1bits.RCIE = 1;
while(!NewReceivedString)
{
delayUS(300000);
timeout++;
if(ReceivedStringPos != ReceivedStringPosOLD)
{
timeout = 0;
}
if(timeout > 25)
{
UARTstringCRLN_CONST("Device resumes without changing Bluetooth Broadcast Name");
return 0;
}
ReceivedStringPosOLD = ReceivedStringPos;
}
PIE1bits.RCIE = 0;
UARTstring_CONST(CRLN);
UARTstring_CONST(CRLN);
if(ReceivedString[0] != 0 && ReceivedString[21-1] == 0)
{
if(IsAlphaNumericString(ReceivedString))
{
UARTstringCRLN_CONST("Bluetooth Module will Reset. Please reconnect device");
UARTstring_CONST(CRLN);
BufferCopy(ReceivedString,BluetoothBroadcast, 21, 0);
delayUS(50000);
if(BluetoothInitialSetup(0))
{
BluetoothChangeStatus = 1;
return 1;
}
else
{
BluetoothChangeStatus = 0;
return 0;
}
}
else
{
UARTstringCRLN_CONST("Name has to be Alphanumeric. No symbols!");
UARTstring_CONST(CRLN);
}
}
else
{
UARTstringCRLN_CONST("Entered Name is too long. Name must be less than 21 characters!");
UARTstring_CONST(CRLN);
}
}
else
{
UARTstringCRLN_CONST("Device resumes without changing Bluetooth Broadcast Name");
UARTstring_CONST(CRLN);
}
return 0;
}
else if(StringMatchCaseInsensitive(String,"Voltage"))
{
UARTstring_CONST(CRLN);
sprintf(buf,"Supply Voltage = %f", (double) ReadVoltage());
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);
}
else if(StringMatchCaseInsensitive(String,"Version"))
{
UARTstring_CONST(CRLN);
sprintf(buf,"Firmware Version: %s", FirmVersion);
UARTstringCRLN(buf);
UARTstring_CONST(CRLN);

UARTstringCRLN_CONST("PCB has Bluetooth capability");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Bluetooth firmware is:");
UARTstringCRLN(BluetoothFirmware1);
UARTstringCRLN(BluetoothFirmware2);
UARTstring_CONST(CRLN);

# 1540
sprintf(buf,"PCB Version: %s", PCBVersion);
UARTstringCRLN(buf);
sprintf(buf,"Transmitting Frequency: %s", Frequency);
UARTstring(buf);
UARTstringCRLN_CONST(CRLN);
sprintf(buf,"Serial Number: %lu", Global2.SerialNumber);
UARTstring(buf);
UARTstring_CONST(CRLN);
return 1;
}
else if(StringMatch(String,"???"))
{
UARTstring_CONST(CRLN);
UARTchar_CONST('|');
for(i=0; i< 80; i++ )
{
UARTchar_CONST('~');
}
UARTchar_CONST('|');
UARTstring_CONST(CRLN);
UARTchar_CONST('|');
for(i=0; i< 34; i++ )
{
UARTchar_CONST('~');
}
UARTstring_CONST("Command Menu");
for(i=0; i< 34; i++ )
{
UARTchar_CONST('~');
}
UARTchar_CONST('|');
UARTstring_CONST(CRLN);
UARTchar_CONST('|');
for(i=0; i< 80; i++ )
{
UARTchar_CONST('~');
}
UARTchar_CONST('|');
UARTstring_CONST(CRLN);
UARTstring_CONST(CRLN);
UARTstring_CONST(CRLN);
PrintHeader("System commands:");
UARTcommandMenu("???", "Help Menu");
UARTcommandMenu("Reset", "Clears memory and resets device");
UARTcommandMenu("Version", "Displays Firmware/Hardware Version");
UARTcommandMenu("Change SN", "Changes Serial Number");
UARTcommandMenu("Change Bluetooth Name", "Changes Bluetooth Broadcast Name");
UARTstring_CONST(CRLN);
PrintHeader("Diagnostic Commands:");
UARTcommandMenu("Voltage", "Displays the supply voltage");
UARTstring_CONST(CRLN);
PrintHeader("IR commands:");
for(i=1; i <= 12; i++)
{
cleanBuffer(buf,50);
sprintf(buf,"RemoteButton%d",i);
UARTcommandMenu(buf, "Transmits saved NEC code");
}
for(i=1; i <= 12; i++)
{
cleanBuffer(buf,50);
sprintf(buf,"RemoteButton%d set",i);
UARTcommandMenu(buf,"Allows saving NEC codes");
}
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("315MHz Codes:");
UARTcommandMenu("RF set all", "Sets Remote button to send all of the RF codes as stated below");
UARTcommandMenu("RF set 1,D", "Sets Remote button to send RF Config 1 channel D");
UARTcommandMenu("RF set 1,E", "Sets Remote button to send RF Config 1 channel E");
UARTcommandMenu("RF set 1,F", "Sets Remote button to send RF Config 1 channel F");
UARTcommandMenu("RF set 2,B", "Sets Remote button to send RF Config 2 channel B");
UARTcommandMenu("RF set 2,D", "Sets Remote button to send RF Config 2 channel D");
UARTcommandMenu("RF set 2,H", "Sets Remote button to send RF Config 2 channel H");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("433MHz Codes:");
UARTcommandMenu("RF set 3,00", "Sets Remote button to send RF Config 3 channel 0 button 0");
UARTcommandMenu("RF set 3,xy", "...");
UARTcommandMenu("RF set 3,f5", "Sets Remote button to send RF Config 3 channel f button 5");
UARTstring_CONST(CRLN);
UARTcommandMenu("RF clear all", "Clears Remote button from all RF codes");
UARTcommandMenu("RF clear system", "Clears all Remote buttons from all RF codes");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("315MHz Codes:");
UARTcommandMenu("RF clear 1,D", "Clears all saved Button for RF Config 1 channel D");
UARTcommandMenu("RF clear 1,E", "Clears all saved Button for RF Config 1 channel E");
UARTcommandMenu("RF clear 1,F", "Clears all saved Button for RF Config 1 channel F");
UARTcommandMenu("RF clear 2,B", "Clears all saved Button for RF Config 2 channel B");
UARTcommandMenu("RF clear 2,D", "Clears all saved Button for RF Config 2 channel D");
UARTcommandMenu("RF clear 2,H", "Clears all saved Button for RF Config 2 channel H");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("433MHz Codes:");
UARTcommandMenu("RF clear 3,00", "Clears all saved Button for RF Config 3 channel 0 button 0");
UARTcommandMenu("RF clear 3,xy", "...");
UARTcommandMenu("RF clear 3,f5", "Clears all saved Button for RF Config 3 channel f button 5");
UARTstring_CONST(CRLN);
UARTcommandMenu("NEC = \"address\", \"command\"","NEC description for Arbitrary code send");
UARTcommandMenu("NEC?", "NEC description for Arbitrary code send");
UARTstring_CONST(CRLN);
PrintHeader("RF commands:");
UARTcommandMenu("RF all", "Send all Rf codes as stated below");
UARTcommandMenu(Conf1_ChannelD_STR, "RFK100LC Channel D");
UARTcommandMenu(Conf1_ChannelE_STR, "RFK100LC Channel E");
UARTcommandMenu(Conf1_ChannelF_STR, "RFK100LC Channel F");
UARTcommandMenu(Conf2_ChannelB_ON_STR, "RFK306LC Channel B ON");
UARTcommandMenu(Conf2_ChannelB_OFF_STR, "RFK306LC Channel B OFF");
UARTcommandMenu(Conf2_ChannelD_ON_STR, "TR009 Channel D ON");
UARTcommandMenu(Conf2_ChannelD_OFF_STR, "TR009 Channel D OFF");
UARTcommandMenu(Conf2_ChannelH_1_ON_STR, "RC-015*3 Channel H device 1 ON");
UARTcommandMenu(Conf2_ChannelH_1_OFF_STR, "RC-015*3 Channel H device 1 OFF");
UARTcommandMenu(Conf2_ChannelH_2_ON_STR, "RC-015*3 Channel H device 2 ON");
UARTcommandMenu(Conf2_ChannelH_2_OFF_STR, "RC-015*3 Channel H device 2 OFF");
UARTcommandMenu(Conf2_ChannelH_3_ON_STR, "RC-015*3 Channel H device 3 ON");
UARTcommandMenu(Conf2_ChannelH_3_OFF_STR, "RC-015*3 Channel H device 3 OFF");
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Etekcity ZAP (model 10-bh9938u-5):");
UARTstringCRLN_CONST("-Enter code from sticker 03\"x\" (x is 0-15 in hex):");
UARTcommandMenu("Conf3_Channel\"x\"1_ON", "channel \"x\"button 1 ON");
UARTcommandMenu("Conf3_Channel\"x\"1_OFF", "channel \"x\"button 1 OFF");
UARTcommandMenu("Conf3_Channel\"x\"2_ON", "channel \"x\"button 2 ON");
UARTcommandMenu("Conf3_Channel\"x\"2_OFF", "channel \"x\"button 2 OFF");
UARTcommandMenu("Conf3_Channel\"x\"3_ON", "channel \"x\"button 3 ON");
UARTcommandMenu("Conf3_Channel\"x\"3_OFF", "channel \"x\"button 3 OFF");
UARTcommandMenu("Conf3_Channel\"x\"4_ON", "channel \"x\"button 4 ON");
UARTcommandMenu("Conf3_Channel\"x\"4_OFF", "channel \"x\"button 4 OFF");
UARTcommandMenu("Conf3_Channel\"x\"5_ON", "channel \"x\"button 5 ON");
UARTcommandMenu("Conf3_Channel\"x\"5_OFF", "channel \"x\"button 5 OFF");
UARTstring_CONST(CRLN);
}
else
{
UARTstringCRLN_CONST(SYNTAX_ERR);
UARTstringCRLN_CONST("Enter ??? for Command Menu");
UARTstring_CONST(CRLN);
return 0;
}
return 0;
}

# 1683
unsigned char WaitForIRsignal(void)
{
unsigned char timeout = 0;

UARTstring_CONST(CRLN);
UARTstring_CONST("Press Remote Control button");
timeout = 0;
while(IR_New_Code != 1)
{
UARTchar_CONST('.');
delayUS(300000);
timeout++;
if(timeout > 25)
{
UARTstring_CONST(CRLN);
UARTstringCRLN_CONST("Error: No remote button was pressed");
return 0;
}
}
(LATC |= 0x04);
LEDTimerON();
return 1;
}

